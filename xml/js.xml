<haxe>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" get="inline" set="null" line="40">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" get="inline" set="null" line="44">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" get="inline" set="null" line="62">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<iterator public="1" get="inline" set="null" line="69">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":runtime"/>
			</meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see http://haxe.org/manual/std-Array.html
	@see http://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="38" static="1">
			<f a=""><c path="Date"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="42" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="46" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" get="inline" set="null" line="34">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx">
		<r><c path="_EReg.HaxeRegExp"/></r>
		<match public="1" set="method" line="30">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="52">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="57">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="77">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" get="inline" set="null" line="83">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="87">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" get="inline" set="null" line="26">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<http://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.RegExp" params="" file="/usr/local/lib/haxe/std/js/RegExp.hx" extern="1">
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<exec public="1" set="method"><f a="str">
	<c path="String"/>
	<t path="Null"><c path="js.RegExpMatch"/></t>
</f></exec>
		<test public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></test>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="pattern:?flags">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Native JavaScript regular expressions.

    For cross-platform regular expressions, use Haxe `EReg` class or 
    [regexp literals](http://haxe.org/manual/std-regex.html).</haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.RegExp"/>
		<m public="1"><c path="js.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/local/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see http://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<get_NEGATIVE_INFINITY get="inline" set="null" line="32" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<get_POSITIVE_INFINITY get="inline" set="null" line="37" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_POSITIVE_INFINITY>
		<NaN public="1" get="accessor" set="null" static="1"><x path="Float"/></NaN>
		<get_NaN get="inline" set="null" line="42" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_NaN>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<ffloor public="1" get="inline" set="null" line="65" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="69" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="73" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="77" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="81" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isNaN>
		<meta><m n=":keepInit"/></meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/js/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="25" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="42" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="47" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="51" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="62" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="66" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="70" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="78" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="85" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="89" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="95" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="103" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see http://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see http://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" get="inline" set="null" line="31" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="35" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="39" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" get="inline" set="null" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="57" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see http://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.  
	`Std.parseFloat` converts a `String` to a `Float`.

	@see http://haxe.org/manual/types-basic-types.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.  
	`Std.parseInt` converts a `String` to an `Int`.

	@see http://haxe.org/manual/types-basic-types.html
	@see http://haxe.org/manual/std-math-integer-math.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see http://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see http://haxe.org/manual/types-bool.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations.

	@see http://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see http://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see http://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see http://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="51"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="64">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="74">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="90">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="183" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="245" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="262" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="287" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="309" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="331" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="353" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="438" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="465" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="488" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code]" line="506" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="521" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](http://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/usr/local/lib/haxe/std/js/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/js/_std/Type.hx">
		<getClass public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="41" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="47" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="52" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="59" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="64" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="72" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="80" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="117" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="122" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="134" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="140" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="148" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" get="inline" set="null" line="159" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="163" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="193" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="211" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="215" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="219" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" get="inline" set="null" line="223" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see http://haxe.org/manual/types.html
	@see http://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.Error" params="" file="/usr/local/lib/haxe/std/js/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="express.Error" params="" file="src/express/Error.hx" extern="1">
		<extends path="js.Error"/>
		<status public="1"><x path="Int"/></status>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="express.Route" params="" file="src/express/Route.hx" extern="1">
		<all public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></all>
		<checkout public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></checkout>
		<connect public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></connect>
		<copy public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></copy>
		<delete public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></delete>
		<get public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></get>
		<head public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></head>
		<lock public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></lock>
		<merge public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></merge>
		<mkactivity public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></mkactivity>
		<mkcol public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></mkcol>
		<move public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></move>
		<notify public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></notify>
		<options public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></options>
		<patch public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></patch>
		<post public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></post>
		<propfind public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></propfind>
		<proppatch public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></proppatch>
		<purge public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></purge>
		<put public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></put>
		<report public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></report>
		<subscribe public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></subscribe>
		<trace public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></trace>
		<unlock public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></unlock>
		<unsubscribe public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></unsubscribe>
	</class>
	<class path="express.Express" params="" file="src/express/Express.hx" extern="1">
		<extends path="express.Route"/>
		<serveStatic public="1" get="inline" set="null" line="37" static="1">
			<f a="root:?options">
				<c path="String"/>
				<t path="express.StaticOptions"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serveStatic>
		<locals public="1" set="null"><a/></locals>
		<mountpath public="1" set="null"><c path="Array"><c path="String"/></c></mountpath>
		<on public="1" set="method"><f a="event:callback">
	<x path="express.ExpressEvent"/>
	<f a="">
		<c path="express.Express"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></on>
		<disable public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></disable>
		<disabled public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></disabled>
		<enable public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></enable>
		<enabled public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></enabled>
		<engine public="1" set="method"><f a="ext:callback">
	<c path="String"/>
	<f a="::">
		<c path="String"/>
		<a/>
		<f a=":">
			<c path="express.Error"/>
			<c path="String"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<c path="express.Express"/>
</f></engine>
		<get public="1" set="method" override="1">
			<f a="path:callback:callbacks">
				<c path="String"/>
				<x path="express.Middleware"/>
				<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
				<x path="Void"/>
			</f>
			<overloads><get public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></get></overloads>
		</get>
		<listen public="1" set="method"><f a="port:?hostname:?backlog:?callback">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></listen>
		<param public="1" set="method"><f a="?name:callback">
	<c path="String"/>
	<f a=":::">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<c path="express.Express"/>
</f></param>
		<path public="1" set="method"><f a=""><c path="String"/></f></path>
		<render public="1" set="method"><f a="view:?locals:callback">
	<c path="String"/>
	<a/>
	<f a=":">
		<c path="express.Error"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></render>
		<route public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="express.Route"/>
</f></route>
		<search public="1" set="method"><f a="path:callback:callbacks">
	<c path="String"/>
	<x path="express.Middleware"/>
	<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
	<x path="Void"/>
</f></search>
		<set public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<c path="express.Express"/>
</f></set>
		<use public="1" set="method">
			<f a="path:callback:callbacks">
				<c path="String"/>
				<t path="express.EitherMiddleware"/>
				<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
				<c path="express.Express"/>
			</f>
			<overloads>
				<use public="1" set="method"><f a="callback">
	<t path="express.EitherMiddleware"/>
	<c path="express.Express"/>
</f></use>
				<use public="1" set="method"><f a="app">
	<c path="express.Express"/>
	<c path="express.Express"/>
</f></use>
				<use public="1" set="method"><f a="path:app">
	<c path="String"/>
	<c path="express.Express"/>
	<c path="express.Express"/>
</f></use>
				<use public="1" set="method"><f a="router">
	<c path="express.Router"/>
	<c path="express.Express"/>
</f></use>
				<use public="1" set="method"><f a="path:router">
	<c path="String"/>
	<c path="express.Router"/>
	<c path="express.Express"/>
</f></use>
			</overloads>
		</use>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":selfCall"/></meta>
		</new>
		<meta><m n=":jsRequire"><e>"express"</e></m></meta>
	</class>
	<abstract path="express.ExpressEvent" params="" file="src/express/Express.hx" module="express.Express">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="express._Express.ExpressEvent_Impl_" params="" file="src/express/Express.hx" private="1" module="express.Express" extern="1">
	<mount public="1" get="inline" set="null" expr="cast &quot;mount&quot;" line="43" static="1">
		<x path="express.ExpressEvent"/>
		<meta>
			<m n=":value"><e>cast "mount"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mount>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="express._Express.ExpressEvent_Impl_" params="" file="src/express/Express.hx" private="1" module="express.Express" extern="1">
		<mount public="1" get="inline" set="null" expr="cast &quot;mount&quot;" line="43" static="1">
			<x path="express.ExpressEvent"/>
			<meta>
				<m n=":value"><e>cast "mount"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mount>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="express.FMiddleware" params="" file="src/express/Middleware.hx" module="express.Middleware"><f a=":">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="Void"/>
</f></typedef>
	<typedef path="express.FMiddlewareNext" params="" file="src/express/Middleware.hx" module="express.Middleware"><f a="::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<x path="Void"/>
</f></typedef>
	<abstract path="express.Middleware" params="" file="src/express/Middleware.hx">
		<from>
			<icast><t path="express.FMiddlewareNext"/></icast>
			<icast><t path="express.FMiddleware"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><t path="express.FMiddlewareNext"/></icast>
			<icast><t path="express.FMiddleware"/></icast>
		</to>
		<impl><class path="express._Middleware.Middleware_Impl_" params="" file="src/express/Middleware.hx" private="1" module="express.Middleware" extern="1"/></impl>
	</abstract>
	<class path="express._Middleware.Middleware_Impl_" params="" file="src/express/Middleware.hx" private="1" module="express.Middleware" extern="1"/>
	<typedef path="express.FErrorMiddleware" params="" file="src/express/Middleware.hx" module="express.Middleware"><f a="::">
	<c path="express.Error"/>
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="Void"/>
</f></typedef>
	<typedef path="express.FErrorMiddlewareNext" params="" file="src/express/Middleware.hx" module="express.Middleware"><f a=":::">
	<c path="express.Error"/>
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<x path="Void"/>
</f></typedef>
	<abstract path="express.ErrorMiddleware" params="" file="src/express/Middleware.hx" module="express.Middleware">
		<from>
			<icast><t path="express.FErrorMiddlewareNext"/></icast>
			<icast><t path="express.FErrorMiddleware"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><t path="express.FErrorMiddlewareNext"/></icast>
			<icast><t path="express.FErrorMiddleware"/></icast>
		</to>
		<impl><class path="express._Middleware.ErrorMiddleware_Impl_" params="" file="src/express/Middleware.hx" private="1" module="express.Middleware" extern="1"/></impl>
	</abstract>
	<class path="express._Middleware.ErrorMiddleware_Impl_" params="" file="src/express/Middleware.hx" private="1" module="express.Middleware" extern="1"/>
	<typedef path="express.EitherMiddleware" params="" file="src/express/Middleware.hx" module="express.Middleware"><x path="haxe.extern.EitherType">
	<x path="express.Middleware"/>
	<x path="express.ErrorMiddleware"/>
</x></typedef>
	<typedef path="express.FNext" params="" file="src/express/Next.hx" module="express.Next"><f a=""><x path="Void"/></f></typedef>
	<typedef path="express.FNextRoute" params="" file="src/express/Next.hx" module="express.Next"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></typedef>
	<typedef path="express.FNextError" params="" file="src/express/Next.hx" module="express.Next"><f a="">
	<c path="express.Error"/>
	<x path="Void"/>
</f></typedef>
	<abstract path="express.Next" params="" file="src/express/Next.hx">
		<from>
			<icast><t path="express.FNextError"/></icast>
			<icast><t path="express.FNextRoute"/></icast>
			<icast><t path="express.FNext"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><t path="express.FNextError"/></icast>
			<icast><t path="express.FNextRoute"/></icast>
			<icast><t path="express.FNext"/></icast>
		</to>
		<impl><class path="express._Next.Next_Impl_" params="" file="src/express/Next.hx" private="1" module="express.Next">
	<call public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<d/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</call>
	<error public="1" get="inline" set="null" line="15" static="1">
		<f a="this:err">
			<d/>
			<c path="js.Error"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</error>
	<route public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<d/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</route>
</class></impl>
	</abstract>
	<class path="express._Next.Next_Impl_" params="" file="src/express/Next.hx" private="1" module="express.Next">
		<call public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</call>
		<error public="1" get="inline" set="null" line="15" static="1">
			<f a="this:err">
				<d/>
				<c path="js.Error"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</error>
		<route public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</route>
	</class>
	<class path="js.node.events.IEventEmitter" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter" extern="1" interface="1">
		<addListener public="1" params="T" set="method"><f a="event:listener">
	<x path="js.node.events.Event"><c path="addListener.T"/></x>
	<c path="addListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></addListener>
		<on public="1" params="T" set="method"><f a="event:listener">
	<x path="js.node.events.Event"><c path="on.T"/></x>
	<c path="on.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></on>
		<once public="1" params="T" set="method"><f a="event:listener">
	<x path="js.node.events.Event"><c path="once.T"/></x>
	<c path="once.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></once>
		<removeListener public="1" params="T" set="method"><f a="event:listener">
	<x path="js.node.events.Event"><c path="removeListener.T"/></x>
	<c path="removeListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></removeListener>
		<removeAllListeners public="1" params="T" set="method"><f a="?event">
	<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
	<c path="js.node.events.IEventEmitter"/>
</f></removeAllListeners>
		<setMaxListeners public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></setMaxListeners>
		<listeners public="1" params="T" set="method"><f a="event">
	<x path="js.node.events.Event"><c path="listeners.T"/></x>
	<c path="Array"><c path="listeners.T"/></c>
</f></listeners>
		<emit public="1" params="T" set="method"><f a="event:args">
	<x path="js.node.events.Event"><c path="emit.T"/></x>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Bool"/>
</f></emit>
		<haxe_doc>`IEventEmitter` interface is used as "any EventEmitter".

    See `EventEmitter` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.events.EventEmitter" params="TSelf" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" extern="1">
		<defaultMaxListeners public="1" static="1">
			<x path="Int"/>
			<haxe_doc>`setMaxListeners` sets the maximum on a per-instance basis.
		This class property lets you set it for all EventEmitter instances,
		current and future, effective immediately. Use with care.

		Note that `setMaxListeners` still has precedence over `defaultMaxListeners`.</haxe_doc>
		</defaultMaxListeners>
		<listenerCount public="1" params="T" set="method" static="1">
			<f a="emitter:event">
				<c path="js.node.events.IEventEmitter"/>
				<x path="js.node.events.Event"><c path="listenerCount.T"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of listeners for a given event.</haxe_doc>
		</listenerCount>
		<addListener public="1" params="T" set="method">
			<f a="event:listener">
				<x path="js.node.events.Event"><c path="addListener.T"/></x>
				<c path="addListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a `listener` to the end of the listeners array for the specified `event`.</haxe_doc>
		</addListener>
		<on public="1" params="T" set="method"><f a="event:listener">
	<x path="js.node.events.Event"><c path="on.T"/></x>
	<c path="on.T"/>
	<c path="js.node.events.EventEmitter.TSelf"/>
</f></on>
		<once public="1" params="T" set="method">
			<f a="event:listener">
				<x path="js.node.events.Event"><c path="once.T"/></x>
				<c path="once.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a one time `listener` for the `event`.

		This listener is invoked only the next time the event is fired, after which it is removed.</haxe_doc>
		</once>
		<removeListener public="1" params="T" set="method">
			<f a="event:listener">
				<x path="js.node.events.Event"><c path="removeListener.T"/></x>
				<c path="removeListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Remove a `listener` from the listener array for the specified `event`.

		Caution: changes array indices in the listener array behind the listener.</haxe_doc>
		</removeListener>
		<removeAllListeners public="1" params="T" set="method">
			<f a="?event">
				<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Removes all listeners, or those of the specified `event`.</haxe_doc>
		</removeAllListeners>
		<setMaxListeners public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>By default `EventEmitter`s will print a warning if more than 10 listeners are added for a particular event.
		This is a useful default which helps finding memory leaks.

		Obviously not all Emitters should be limited to 10. This function allows that to be increased.
		Set to zero for unlimited.</haxe_doc>
		</setMaxListeners>
		<listeners public="1" params="T" set="method">
			<f a="event">
				<x path="js.node.events.Event"><c path="listeners.T"/></x>
				<c path="Array"><c path="listeners.T"/></c>
			</f>
			<haxe_doc>Returns an array of listeners for the specified event.</haxe_doc>
		</listeners>
		<emit public="1" params="T" set="method">
			<f a="event:args">
				<x path="js.node.events.Event"><c path="emit.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute each of the listeners in order with the supplied arguments.
		Returns true if event had listeners, false otherwise.</haxe_doc>
		</emit>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>All objects which emit events are instances of `EventEmitter`.

	Typically, event names are represented by a camel-cased string, however,
	there aren't any strict restrictions on that, as any string will be accepted.

	Functions can then be attached to objects, to be executed when an event is emitted.
	These functions are called listeners.

	When an `EventEmitter` instance experiences an error, the typical action is to emit an 'error' event.
	Error events are treated as a special case in node. If there is no listener for it, then the default action
	is to print a stack trace and exit the program.

	All `EventEmitter`s emit the event `newListener` when new listeners are added
	and `removeListener` when a listener is removed.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"events"</e>
	<e>"EventEmitter"</e>
</m></meta>
	</class>
	<class path="js.node.IStream" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Stream.hx" module="js.node.Stream" extern="1" interface="1">
		<haxe_doc>`IStream` interface is used as "any Stream".

    See `Stream` for actual class.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.Stream" params="TSelf" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Stream.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.Stream.TSelf"/></extends>
		<new set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Base class for all streams.</haxe_doc>
		<meta><m n=":jsRequire"><e>"stream"</e></m></meta>
	</class>
	<class path="js.node.stream.IReadable" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" module="js.node.stream.Readable" extern="1" interface="1">
		<read public="1" set="method"><f a="?size">
	<x path="Int"/>
	<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></t>
</f></read>
		<setEncoding public="1" set="method"><f a="encoding">
	<c path="String"/>
	<x path="Void"/>
</f></setEncoding>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<pipe public="1" params="T" set="method"><f a="destination:?options">
	<c path="pipe.T"/>
	<a><end>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
</end></a>
	<c path="pipe.T"/>
</f></pipe>
		<unpipe public="1" set="method">
			<f a="destination">
				<c path="js.node.stream.IWritable"/>
				<x path="Void"/>
			</f>
			<overloads><unpipe public="1" set="method"><f a=""><x path="Void"/></f></unpipe></overloads>
		</unpipe>
		<unshift public="1" set="method">
			<f a="chunk">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><unshift public="1" set="method"><f a="chunk">
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></unshift></overloads>
		</unshift>
		<wrap public="1" set="method"><f a="stream">
	<d/>
	<c path="js.node.stream.IReadable"/>
</f></wrap>
		<haxe_doc>`IReadable` interface is used as "any Readable".

    See `Readable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Readable" params="TSelf" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Readable.TSelf"/></extends>
		<read public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></t>
			</f>
			<haxe_doc>The `read` method pulls some data out of the internal buffer and returns it.
		If there is no data available, then it will return null.

		If you pass in a `size` argument, then it will return that many bytes.
		If `size` bytes are not available, then it will return null.

		If you do not specify a `size` argument, then it will return all the data in the internal buffer.

		This method should only be called in non-flowing mode.
		In flowing-mode, this method is called automatically until the internal buffer is drained.</haxe_doc>
		</read>
		<setEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this function to cause the stream to return strings of the specified encoding instead of `Buffer` objects.
		For example, if you do `setEncoding('utf8')`, then the output data will be interpreted as UTF-8 data,
		and returned as strings. If you do `setEncoding('hex')`, then the data will be encoded in hexadecimal string format.

		This properly handles multi-byte characters that would otherwise be potentially mangled if you simply pulled
		the `Buffer`s directly and called `buf.toString(encoding)` on them.

		If you want to read the data as strings, always use this method.</haxe_doc>
		</setEncoding>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method will cause the readable stream to resume emitting 'data' events.

		This method will switch the stream into flowing-mode.
		If you do not want to consume the data from a stream, but you do want to get to its `end` event,
		you can call `resume` to open the flow of data.</haxe_doc>
		</resume>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method will cause a stream in flowing-mode to stop emitting 'data' events.

		Any data that becomes available will remain in the internal buffer.

		This method is only relevant in flowing mode. When called on a non-flowing stream,
		it will switch into flowing mode, but remain paused.</haxe_doc>
		</pause>
		<pipe public="1" params="T" set="method">
			<f a="destination:?options">
				<c path="pipe.T"/>
				<a><end>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
</end></a>
				<c path="pipe.T"/>
			</f>
			<haxe_doc>This method pulls all the data out of a readable stream, and writes it to the supplied destination,
		automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.

		Multiple destinations can be piped to safely.

		This function returns the destination stream, so you can set up pipe chains.

		By default `end` is called on the destination when the source stream emits 'end',
		so that destination is no longer writable. Pass `{end: false}` as `options`
		to keep the destination stream open.

		Note that `Process.stderr` and `Process.stdout` are never closed until the process exits,
		regardless of the specified options.</haxe_doc>
		</pipe>
		<unpipe public="1" set="method">
			<f a="destination">
				<c path="js.node.stream.IWritable"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method will remove the hooks set up for a previous `pipe` call.

		If the `destination` is not specified, then all pipes are removed.

		If the `destination` is specified, but no pipe is set up for it, then this is a no-op.</haxe_doc>
			<overloads><unpipe public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>This method will remove the hooks set up for a previous `pipe` call.

		If the `destination` is not specified, then all pipes are removed.

		If the `destination` is specified, but no pipe is set up for it, then this is a no-op.</haxe_doc>
</unpipe></overloads>
		</unpipe>
		<unshift public="1" set="method">
			<f a="chunk">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This is useful in certain cases where a stream is being consumed by a parser,
		which needs to "un-consume" some data that it has optimistically pulled out of the source,
		so that the stream can be passed on to some other party.

		If you find that you must often call `unshift` in your programs,
		consider implementing a `Transform` stream instead.</haxe_doc>
			<overloads><unshift public="1" set="method">
	<f a="chunk">
		<t path="js.node.Buffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>This is useful in certain cases where a stream is being consumed by a parser,
		which needs to "un-consume" some data that it has optimistically pulled out of the source,
		so that the stream can be passed on to some other party.

		If you find that you must often call `unshift` in your programs,
		consider implementing a `Transform` stream instead.</haxe_doc>
</unshift></overloads>
		</unshift>
		<wrap public="1" set="method">
			<f a="stream">
				<d/>
				<c path="js.node.stream.IReadable"/>
			</f>
			<haxe_doc>Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today.

		If you are using an older Node library that emits 'data' events and has a 'pause' method that is advisory only,
		then you can use the `wrap` method to create a `Readable` stream that uses the old stream as its data source.</haxe_doc>
		</wrap>
		<_read set="method"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></_read>
		<push set="method">
			<f a="chunk:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><push set="method"><f a="chunk">
	<t path="js.node.Buffer"/>
	<x path="Bool"/>
</f></push></overloads>
		</push>
		<new set="method"><f a="?options">
	<t path="js.node.stream.ReadableNewOptions"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Readable stream interface is the abstraction for a source of data that you are reading from.
	In other words, data comes out of a Readable stream.

	A Readable stream will not start emitting data until you indicate that you are ready to receive it.

	Readable streams have two "modes": a flowing mode and a non-flowing mode.
	When in flowing mode, data is read from the underlying system and provided to your program as fast as possible.
	In non-flowing mode, you must explicitly call `read` to get chunks of data out.

	Examples of readable streams include:
		- http responses, on the client
		- http requests, on the server
		- fs read streams
		- zlib streams
		- crypto streams
		- tcp sockets
		- child process stdout and stderr
		- process.stdin</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Readable"</e>
</m></meta>
	</class>
	<class path="js.node.http.IncomingMessage" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/IncomingMessage.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.http.IncomingMessage"/></extends>
		<httpVersion public="1" set="null">
			<c path="String"/>
			<haxe_doc>In case of server request, the HTTP version sent by the client.
		In the case of client response, the HTTP version of the connected-to server.
		Probably either '1.1' or '1.0'.</haxe_doc>
		</httpVersion>
		<httpVersionMajor public="1" set="null">
			<x path="Int"/>
			<haxe_doc>HTTP Version first integer</haxe_doc>
		</httpVersionMajor>
		<httpVersionMinor public="1" set="null">
			<x path="Int"/>
			<haxe_doc>HTTP Version second integer</haxe_doc>
		</httpVersionMinor>
		<headers public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>The request/response headers object.
		Read only map of header names and values. Header names are lower-cased</haxe_doc>
		</headers>
		<trailers public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>The request/response trailers object.
		Only populated after the 'end' event.</haxe_doc>
		</trailers>
		<setTimeout public="1" set="method">
			<f a="msecs:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `setTimeout` on the `socket` object.</haxe_doc>
		</setTimeout>
		<method public="1" set="null">
			<x path="js.node.http.Method"/>
			<haxe_doc>Only valid for request obtained from `Server`.

		The request method as a string.
		Read only. Example: 'GET', 'DELETE'.</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Only valid for request obtained from `Server`.

		Request URL string. This contains only the URL that is present in the actual HTTP request.</haxe_doc>
		</url>
		<statusCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Only valid for response obtained from `ClientRequest`.
		The 3-digit HTTP response status code. E.G. 404.</haxe_doc>
		</statusCode>
		<socket public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>The `Socket` object associated with the connection.</haxe_doc>
		</socket>
		<connection public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>Alias for `socket`.</haxe_doc>
		</connection>
		<haxe_doc>An `IncomingMessage` object is created by `Server` or `ClientRequest`
	and passed as the first argument to the 'request' and 'response' event respectively.
	It may be used to access response status, headers and data.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"IncomingMessage"</e>
</m></meta>
	</class>
	<class path="express.Request" params="" file="src/express/Request.hx" extern="1">
		<extends path="js.node.http.IncomingMessage"/>
		<app public="1"><c path="express.Express"/></app>
		<baseUrl public="1"><c path="String"/></baseUrl>
		<body public="1"><a/></body>
		<fresh public="1"><x path="Bool"/></fresh>
		<hostname public="1"><c path="String"/></hostname>
		<ip public="1"><c path="String"/></ip>
		<ips public="1"><c path="Array"><c path="String"/></c></ips>
		<originalUrl public="1"><c path="String"/></originalUrl>
		<params public="1"><a/></params>
		<path public="1"><c path="String"/></path>
		<protocol public="1"><c path="String"/></protocol>
		<query public="1"><a/></query>
		<route public="1"><c path="String"/></route>
		<secure public="1"><x path="Bool"/></secure>
		<stale public="1"><x path="Bool"/></stale>
		<subdomains public="1"><c path="Array"><c path="String"/></c></subdomains>
		<xhr public="1"><x path="Bool"/></xhr>
		<accepts public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><accepts public="1" set="method"><f a="types">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></accepts></overloads>
		</accepts>
		<acceptsCharsets public="1" set="method"><f a="charset:charsets">
	<c path="String"/>
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></acceptsCharsets>
		<acceptsEncodings public="1" set="method"><f a="encoding:encodings">
	<c path="String"/>
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></acceptsEncodings>
		<acceptsLanguages public="1" set="method"><f a="languageg:languages">
	<c path="String"/>
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></acceptsLanguages>
		<get public="1" set="method"><f a="field">
	<c path="String"/>
	<c path="String"/>
</f></get>
		<is public="1" set="method">
			<f a="type">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Bool"/>
				</x>
			</f>
			<overloads><is public="1" set="method"><f a="types">
	<c path="Array"><c path="String"/></c>
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<x path="Bool"/>
	</x>
</f></is></overloads>
		</is>
		<param public="1" set="method"><f a="name:?defaultValue">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></param>
	</class>
	<class path="js.node.stream.IWritable" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" module="js.node.stream.Writable" extern="1" interface="1">
		<write public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="chunk:?callback">
	<t path="js.node.Buffer"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
</f></write>
				<write public="1" set="method"><f a="chunk:?callback">
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
</f></write>
			</overloads>
		</write>
		<end public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<overloads>
				<end public="1" set="method"><f a="?callback">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></end>
				<end public="1" set="method"><f a="chunk:?callback">
	<t path="js.node.Buffer"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></end>
				<end public="1" set="method"><f a="chunk:?callback">
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></end>
			</overloads>
		</end>
		<isTTY public="1" set="null"><x path="Bool"/></isTTY>
		<haxe_doc>Writable interface used for type parameter constraints.
    See `Writable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Writable" params="TSelf" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Writable.TSelf"/></extends>
		<write public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
			</f>
			<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="chunk:?callback">
						<t path="js.node.Buffer"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
					</f>
					<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="chunk:?callback">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
					</f>
					<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
				</write>
			</overloads>
		</write>
		<end public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
			<overloads>
				<end public="1" set="method">
					<f a="?callback">
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
				</end>
				<end public="1" set="method">
					<f a="chunk:?callback">
						<t path="js.node.Buffer"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
				</end>
				<end public="1" set="method">
					<f a="chunk:?callback">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
				</end>
			</overloads>
		</end>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal write streams (i.e. process.stdout) have this property set to true.
		It is false for any other write streams.</haxe_doc>
		</isTTY>
		<_write set="method">
			<f a="chunk:encoding:callback">
				<t path="js.node.Buffer"/>
				<c path="String"/>
				<f a="">
					<c path="js.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads><_write set="method"><f a="chunk:encoding:callback">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="js.Error"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></_write></overloads>
		</_write>
		<new set="method"><f a="?options">
	<t path="js.node.stream.WritableNewOptions"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Writable stream interface is an abstraction for a destination that you are writing data to.

	Examples of writable streams include:
		- http requests, on the client
		- http responses, on the server
		- fs write streams
		- zlib streams
		- crypto streams
		- tcp sockets
		- child process stdin
		- process.stdout, process.stderr</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Writable"</e>
</m></meta>
	</class>
	<class path="js.node.http.ServerResponse" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/ServerResponse.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.http.ServerResponse"/></extends>
		<writeContinue public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent.
		See the 'checkContinue' event on `Server`.</haxe_doc>
		</writeContinue>
		<writeHead public="1" set="method">
			<f a="statusCode:reasonPhrase:?headers">
				<x path="Int"/>
				<c path="String"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a response header to the request.
		The status code is a 3-digit HTTP status code, like 404.
		The last argument, `headers`, are the response headers.
		Optionally one can give a human-readable `reasonPhrase` as the second argument.

		This method must only be called once on a message and it must be called before `end` is called.

		If you call `write` or `end` before calling this, the implicit/mutable headers
		will be calculated and call this function for you.

		Note: that Content-Length is given in bytes not characters.</haxe_doc>
			<overloads><writeHead public="1" set="method">
	<f a="statusCode:?headers">
		<x path="Int"/>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Sends a response header to the request.
		The status code is a 3-digit HTTP status code, like 404.
		The last argument, `headers`, are the response headers.
		Optionally one can give a human-readable `reasonPhrase` as the second argument.

		This method must only be called once on a message and it must be called before `end` is called.

		If you call `write` or `end` before calling this, the implicit/mutable headers
		will be calculated and call this function for you.

		Note: that Content-Length is given in bytes not characters.</haxe_doc>
</writeHead></overloads>
		</writeHead>
		<setTimeout public="1" set="method">
			<f a="msecs:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Socket`'s timeout value to `msecs`.
		If a `callback` is provided, then it is added as a listener on the 'timeout' event on the response object.

		If no 'timeout' listener is added to the request, the response, or the server,
		then sockets are destroyed when they time out. If you assign a handler on the request,
		the response, or the server's 'timeout' events, then it is your responsibility to handle timed out sockets.</haxe_doc>
		</setTimeout>
		<statusCode public="1">
			<x path="Int"/>
			<haxe_doc>When using implicit headers (not calling `writeHead` explicitly), this property controls the status code
		that will be sent to the client when the headers get flushed.</haxe_doc>
		</statusCode>
		<headersSent public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>True if headers were sent, false otherwise.</haxe_doc>
		</headersSent>
		<sendDate public="1">
			<x path="Bool"/>
			<haxe_doc>When true, the Date header will be automatically generated and sent in the response
		if it is not already present in the headers.
		Defaults to true.

		This should only be disabled for testing; HTTP requires the Date header in responses.</haxe_doc>
		</sendDate>
		<getHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Reads out a header that's already been queued but not sent to the client.
		Note that the name is case insensitive.
		This can only be called before headers get implicitly flushed.</haxe_doc>
		</getHeader>
		<setHeader public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a single header value for implicit headers.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here if you need to send multiple headers with the same name.</haxe_doc>
			<overloads><setHeader public="1" set="method">
	<f a="name:value">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a single header value for implicit headers.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here if you need to send multiple headers with the same name.</haxe_doc>
</setHeader></overloads>
		</setHeader>
		<removeHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a header that's queued for implicit sending.</haxe_doc>
		</removeHeader>
		<addTrailers public="1" set="method">
			<f a="headers">
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>This method adds HTTP trailing headers (a header but at the end of the message) to the response.

		Trailers will only be emitted if chunked encoding is used for the response;
		if it is not (e.g., if the request was HTTP/1.0), they will be silently discarded.

		Note that HTTP requires the 'Trailer' header to be sent if you intend to emit trailers,
		with a list of the header fields in its value.</haxe_doc>
			<overloads><addTrailers public="1" set="method">
	<f a="headers">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="Void"/>
	</f>
	<haxe_doc>This method adds HTTP trailing headers (a header but at the end of the message) to the response.

		Trailers will only be emitted if chunked encoding is used for the response;
		if it is not (e.g., if the request was HTTP/1.0), they will be silently discarded.

		Note that HTTP requires the 'Trailer' header to be sent if you intend to emit trailers,
		with a list of the header fields in its value.</haxe_doc>
</addTrailers></overloads>
		</addTrailers>
		<haxe_doc>This object is created internally by a HTTP server--not by the user.
	It is passed as the second parameter to the 'request' event.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"ServerResponse"</e>
</m></meta>
	</class>
	<class path="express.Response" params="" file="src/express/Response.hx" extern="1">
		<extends path="js.node.http.ServerResponse"/>
		<app public="1"><c path="express.Express"/></app>
		<headersSend public="1"><x path="Bool"/></headersSend>
		<locals public="1"><a/></locals>
		<append public="1" set="method">
			<f a="field:value">
				<c path="String"/>
				<c path="String"/>
				<c path="express.Response"/>
			</f>
			<overloads><append public="1" set="method"><f a="field:values">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></append></overloads>
		</append>
		<attachment public="1" set="method"><f a="?filename">
	<c path="String"/>
	<c path="express.Response"/>
</f></attachment>
		<cookie public="1" set="method"><f a="name:value:?options">
	<c path="String"/>
	<c path="String"/>
	<t path="express.CookieOptions"/>
	<c path="express.Response"/>
</f></cookie>
		<clearCookie public="1" set="method"><f a="name:?options">
	<c path="String"/>
	<t path="express.CookieOptions"/>
	<c path="express.Response"/>
</f></clearCookie>
		<download public="1" set="method"><f a="path:?filename:?callback">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="express.Error"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></download>
		<format public="1" set="method"><f a="object">
	<d><f a=""><x path="Void"/></f></d>
	<c path="express.Response"/>
</f></format>
		<get public="1" set="method"><f a="field">
	<c path="String"/>
	<c path="String"/>
</f></get>
		<json public="1" set="method">
			<f a="body">
				<a/>
				<c path="express.Response"/>
			</f>
			<overloads>
				<json public="1" set="method"><f a="body">
	<x path="Int"/>
	<x path="Void"/>
</f></json>
				<json public="1" set="method"><f a="body">
	<x path="Float"/>
	<x path="Void"/>
</f></json>
				<json public="1" set="method"><f a="body">
	<c path="String"/>
	<x path="Void"/>
</f></json>
				<json public="1" set="method"><f a="body">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></json>
			</overloads>
		</json>
		<jsonp public="1" set="method">
			<f a="body">
				<a/>
				<c path="express.Response"/>
			</f>
			<overloads>
				<jsonp public="1" set="method"><f a="body">
	<x path="Int"/>
	<x path="Void"/>
</f></jsonp>
				<jsonp public="1" set="method"><f a="body">
	<x path="Float"/>
	<x path="Void"/>
</f></jsonp>
				<jsonp public="1" set="method"><f a="body">
	<c path="String"/>
	<x path="Void"/>
</f></jsonp>
				<jsonp public="1" set="method"><f a="body">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></jsonp>
			</overloads>
		</jsonp>
		<links public="1" set="method"><f a="links">
	<d><c path="String"/></d>
	<x path="Void"/>
</f></links>
		<location public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="express.Response"/>
</f></location>
		<redirect public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><redirect public="1" set="method"><f a="status:path">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></redirect></overloads>
		</redirect>
		<render public="1" set="method"><f a="view:?locals:?callback">
	<c path="String"/>
	<a/>
	<f a=":">
		<c path="express.Error"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></render>
		<send public="1" set="method">
			<f a="body">
				<a/>
				<c path="express.Response"/>
			</f>
			<overloads>
				<send public="1" set="method"><f a="body">
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></send>
				<send public="1" set="method"><f a="body">
	<c path="String"/>
	<x path="Void"/>
</f></send>
				<send public="1" set="method"><f a="body">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></send>
			</overloads>
		</send>
		<sendFile public="1" set="method"><f a="path:?options:?callback">
	<c path="String"/>
	<t path="express.SendFileOptions"/>
	<f a="">
		<c path="express.Error"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></sendFile>
		<sendStatus public="1" set="method"><f a="statusCode">
	<x path="Int"/>
	<c path="express.Response"/>
</f></sendStatus>
		<set public="1" set="method">
			<f a="body">
				<d><c path="String"/></d>
				<c path="express.Response"/>
			</f>
			<overloads><set public="1" set="method"><f a="field:value">
	<c path="String"/>
	<c path="String"/>
	<c path="express.Response"/>
</f></set></overloads>
		</set>
		<status public="1" set="method"><f a="statusCode">
	<x path="Int"/>
	<c path="express.Response"/>
</f></status>
		<type public="1" set="method"><f a="type">
	<c path="String"/>
	<c path="String"/>
</f></type>
		<vary public="1" set="method"><f a="field">
	<c path="String"/>
	<c path="express.Response"/>
</f></vary>
	</class>
	<typedef path="express.CookieOptions" params="" file="src/express/Response.hx" module="express.Response"><a>
	<signed>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</signed>
	<secure>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</secure>
	<path>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</path>
	<maxAge>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</maxAge>
	<httpOnly>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</httpOnly>
	<expires>
		<t path="Null"><c path="Date"/></t>
		<meta><m n=":optional"/></meta>
	</expires>
	<domain>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</domain>
</a></typedef>
	<typedef path="express.SendFileOptions" params="" file="src/express/Response.hx" module="express.Response"><a>
	<root>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</root>
	<maxAge>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</maxAge>
	<lastModified>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</lastModified>
	<headers>
		<t path="Null"><d><c path="String"/></d></t>
		<meta><m n=":optional"/></meta>
	</headers>
	<dotfiles>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</dotfiles>
</a></typedef>
	<class path="express.Router" params="" file="src/express/Router.hx" extern="1">
		<extends path="express.Route"/>
		<param public="1" set="method"><f a="?name:callback">
	<c path="String"/>
	<f a=":::">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></param>
		<path public="1" set="method"><f a=""><c path="String"/></f></path>
		<use public="1" set="method">
			<f a="path:callback:callbacks">
				<c path="String"/>
				<t path="express.EitherMiddleware"/>
				<x path="haxe.extern.Rest"><x path="express.Middleware"/></x>
				<c path="express.Router"/>
			</f>
			<overloads>
				<use public="1" set="method"><f a="callback">
	<t path="express.EitherMiddleware"/>
	<c path="express.Router"/>
</f></use>
				<use public="1" set="method"><f a="router">
	<c path="express.Router"/>
	<c path="express.Router"/>
</f></use>
				<use public="1" set="method"><f a="path:router">
	<c path="String"/>
	<c path="express.Router"/>
	<c path="express.Router"/>
</f></use>
			</overloads>
		</use>
		<new public="1" set="method">
			<f a="?options">
				<t path="express.RouterOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</new>
		<meta><m n=":jsRequire">
	<e>"express"</e>
	<e>"Router"</e>
</m></meta>
	</class>
	<typedef path="express.RouterOptions" params="" file="src/express/Router.hx" module="express.Router"><a>
	<strict>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</strict>
	<mergeParams>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</mergeParams>
	<caseSensitive>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</caseSensitive>
</a></typedef>
	<typedef path="express.StaticOptions" params="" file="src/express/StaticOptions.hx"><a>
	<setHeaders>
		<t path="Null"><f a="::">
	<c path="express.Response"/>
	<c path="String"/>
	<c path="js.node.fs.Stats"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</setHeaders>
	<redirect>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</redirect>
	<maxAge>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Float"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</maxAge>
	<lastModified>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</lastModified>
	<index>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</index>
	<extensions>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</extensions>
	<etag>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</etag>
	<dotfiles>
		<t path="Null"><x path="express.DotFile"/></t>
		<meta><m n=":optional"/></meta>
	</dotfiles>
</a></typedef>
	<abstract path="express.DotFile" params="" file="src/express/StaticOptions.hx" module="express.StaticOptions">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="express._StaticOptions.DotFile_Impl_" params="" file="src/express/StaticOptions.hx" private="1" module="express.StaticOptions" extern="1">
	<allow public="1" get="inline" set="null" expr="cast &quot;allow&quot;" line="19" static="1">
		<x path="express.DotFile"/>
		<meta>
			<m n=":value"><e>cast "allow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</allow>
	<deny public="1" get="inline" set="null" expr="cast &quot;deny&quot;" line="20" static="1">
		<x path="express.DotFile"/>
		<meta>
			<m n=":value"><e>cast "deny"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</deny>
	<ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="21" static="1">
		<x path="express.DotFile"/>
		<meta>
			<m n=":value"><e>cast "ignore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ignore>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="express._StaticOptions.DotFile_Impl_" params="" file="src/express/StaticOptions.hx" private="1" module="express.StaticOptions" extern="1">
		<allow public="1" get="inline" set="null" expr="cast &quot;allow&quot;" line="19" static="1">
			<x path="express.DotFile"/>
			<meta>
				<m n=":value"><e>cast "allow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</allow>
		<deny public="1" get="inline" set="null" expr="cast &quot;deny&quot;" line="20" static="1">
			<x path="express.DotFile"/>
			<meta>
				<m n=":value"><e>cast "deny"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</deny>
		<ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="21" static="1">
			<x path="express.DotFile"/>
			<meta>
				<m n=":value"><e>cast "ignore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ignore>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](http://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](http://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul set="method" line="72" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<mulInt get="inline" set="null" line="75" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<toFloat get="inline" set="null" line="200" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="206" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="217" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul set="method" line="72" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<mulInt get="inline" set="null" line="75" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<toFloat get="inline" set="null" line="200" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="206" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="217" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="65" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="82" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="95" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="101" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="128" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="131" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="169" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="216" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="224" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="231" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="244" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="266" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="282" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="302" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="308" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="311" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="314" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="320" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="323" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="326" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="332" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="335" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="341" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="344" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="347" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="350" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="353" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="356" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="359" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="362" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="365" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="368" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="371" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="374" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="377" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="380" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="386" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="392" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="398" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="404" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="410" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="421" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="432" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="440" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="441" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="444" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="445" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="65" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="95" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="101" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="128" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="131" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="169" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="216" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="224" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="231" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="244" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="266" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="282" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="302" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="308" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="311" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="314" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="320" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="323" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="326" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="332" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="335" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="341" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="344" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="347" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="350" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="353" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="356" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="359" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="362" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="365" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="368" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="371" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="374" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="377" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="380" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="386" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="392" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="398" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="404" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="410" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="421" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="432" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="440" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="441" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="444" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="445" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="469">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="459"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/usr/local/lib/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="75" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Bytes.hx">
		<alloc public="1" get="inline" set="null" line="193" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="197" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="225" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofData>
		<fastGet public="1" get="inline" set="null" line="231" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.html.Uint8Array"/></b>
		<data><c path="js.html.DataView"/></data>
		<get public="1" get="inline" set="null" line="46"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="50"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="54"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="62"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="67"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="72"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<initData get="inline" set="null" line="82"><f a=""><x path="Void"/></f></initData>
		<getDouble public="1" set="method" line="86">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="91">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="96">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="101">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" set="method" line="106">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" set="method" line="111">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" set="method" line="116">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<setInt32 public="1" set="method" line="121">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<getInt64 public="1" set="method" line="126">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt64 public="1" set="method" line="130">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="135"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="167">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="171"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="175"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="189">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getData>
		<new set="method" line="36">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.html.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/html/ArrayBufferView.hx" extern="1">
		<buffer public="1" set="null"><c path="js.html.ArrayBuffer"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<meta><m n=":native"><e>"ArrayBufferView"</e></m></meta>
	</class>
	<class path="js.html.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/html/Uint8Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
				<set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Uint8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
			</overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint8Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint8Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/local/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc>An abstract type allowing values to be either of `T1` or `T2` type.
    Supports implicit casts from/to either types.

    It is useful for interfacing with external code on dynamic platforms
    such as JavaScript or Python.

    Otherwise, use of this type is discouraged.</haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc>A special abstract type that represents "rest" function argument.

    Should be used as a type for the last argument of an extern method,
    representing that arbitrary number of arguments of given type can be
    passed to that method.</haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.html.ArrayBuffer"/></typedef>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="js._Boot.HaxeError" params="" file="/usr/local/lib/haxe/std/js/Boot.hx" private="1" module="js.Boot">
		<extends path="js.Error"/>
		<wrap public="1" set="method" line="35" static="1">
			<f a="val">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</wrap>
		<val><d/></val>
		<new public="1" set="method" line="28">
			<f a="val">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<__unhtml set="method" line="43" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="47" static="1">
			<f a="v:i">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__trace>
		<__clear_trace set="method" line="67" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__clear_trace>
		<isClass get="inline" set="null" line="79" static="1">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isClass>
		<isEnum get="inline" set="null" line="83" static="1">
			<f a="e">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isEnum>
		<getClass set="method" line="87" static="1">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="102" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="174" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="189" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_catch"</e></m>
			</meta>
		</__instanceof>
		<__cast set="method" line="228" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr expr="untyped ({ }).toString" line="233" static="1">
			<a><call set="null"><f a="">
	<d/>
	<a><slice set="null"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></slice></a>
</f></call></a>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>untyped ({ }).toString</e></m>
			</meta>
		</__toStr>
		<__nativeClassName set="method" line="235" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__nativeClassName>
		<__isNativeObj set="method" line="245" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="250" static="1">
			<f a="name">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__resolveNativeClass>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="js.EvalError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.RangeError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.TypeError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.URIError" params="" file="/usr/local/lib/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.Lib" params="" file="/usr/local/lib/haxe/std/js/Lib.hx">
		<debug public="1" get="inline" set="null" line="33" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Inserts a 'debugger' statement that will make a breakpoint if a debugger is available.</haxe_doc>
		</debug>
		<alert public="1" set="method" line="42" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"Lib.alert() is deprecated, use Browser.alert() instead"</e></m>
			</meta>
			<haxe_doc>Display an alert message box containing the given message.
		@deprecated Use Browser.alert() instead.</haxe_doc>
		</alert>
		<eval public="1" get="inline" set="null" line="46" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</eval>
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<undefined public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>Returns JavaScript `undefined` value.

		Note that this is only needed in very rare cases when working with external JavaScript code.

		In Haxe, `null` is used to represent the absence of a value.</haxe_doc>
		</undefined>
		<get_undefined get="inline" set="null" line="69" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_undefined>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="86" static="1">
			<f a=""><d/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</get_nativeThis>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="104" static="1">
			<f a=""><d/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</get_global>
		<rethrow public="1" get="inline" set="null" line="113" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Re-throw last cathed exception, preserving original stack information.

		Calling this only makes sense inside a catch statement.</haxe_doc>
		</rethrow>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions 
	for the JavaScript target.</haxe_doc>
	</class>
	<class path="js.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/RegExp.hx" module="js.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1"><x path="Int"/></index>
		<input public="1"><c path="String"/></input>
	</class>
	<class path="js.html.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/html/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.html.DataView" params="" file="/usr/local/lib/haxe/std/js/html/DataView.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<typedef path="js.node.Buffer" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Buffer.hx"><c path="js.node.buffer.Buffer"/></typedef>
	<abstract path="js.node.DnsAddressFamily" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Enumeration of possible Int `options` values for `Dns.lookup`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Dns.DnsAddressFamily_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1">
	<IPv4 public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
		<x path="js.node.DnsAddressFamily"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv4>
	<IPv6 public="1" get="inline" set="null" expr="cast 6" line="31" static="1">
		<x path="js.node.DnsAddressFamily"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv6>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Dns.DnsAddressFamily_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1">
		<IPv4 public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
			<x path="js.node.DnsAddressFamily"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv4>
		<IPv6 public="1" get="inline" set="null" expr="cast 6" line="31" static="1">
			<x path="js.node.DnsAddressFamily"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv6>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.DnsLookupOptions" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns">
		<a>
			<hints>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If present, it should be one or more of the supported `getaddrinfo` flags.
		If hints is not provided, then no flags are passed to `getaddrinfo`.
		Multiple flags can be passed through hints by logically ORing their values.</haxe_doc>
			</hints>
			<family>
				<t path="Null"><x path="js.node.DnsAddressFamily"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The record family. If not provided, both IP v4 and v6 addresses are accepted.</haxe_doc>
			</family>
			<all>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>When true, the callback returns all resolved addresses in an array, otherwise returns a single address.
		Defaults to false.</haxe_doc>
			</all>
		</a>
		<haxe_doc>Type of the `options` argument for `Dns.lookup`.</haxe_doc>
	</typedef>
	<abstract path="js.node.DnsRrtype" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible `rrtype` value for `Dns.resolve`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Dns.DnsRrtype_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1">
	<A public="1" get="inline" set="null" expr="cast &quot;A&quot;" line="64" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "A"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>IPV4 addresses, default</haxe_doc>
	</A>
	<AAAA public="1" get="inline" set="null" expr="cast &quot;AAAA&quot;" line="69" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "AAAA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>IPV6 addresses</haxe_doc>
	</AAAA>
	<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="74" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "MX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>mail exchange records</haxe_doc>
	</MX>
	<TXT public="1" get="inline" set="null" expr="cast &quot;TXT&quot;" line="79" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "TXT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>text records</haxe_doc>
	</TXT>
	<SRV public="1" get="inline" set="null" expr="cast &quot;SRV&quot;" line="84" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "SRV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>SRV records</haxe_doc>
	</SRV>
	<PTR public="1" get="inline" set="null" expr="cast &quot;PTR&quot;" line="89" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "PTR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>used for reverse IP lookups</haxe_doc>
	</PTR>
	<NS public="1" get="inline" set="null" expr="cast &quot;NS&quot;" line="94" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "NS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>name server records</haxe_doc>
	</NS>
	<CNAME public="1" get="inline" set="null" expr="cast &quot;CNAME&quot;" line="99" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "CNAME"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>canonical name records</haxe_doc>
	</CNAME>
	<SOA public="1" get="inline" set="null" expr="cast &quot;SOA&quot;" line="104" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "SOA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>start of authority record</haxe_doc>
	</SOA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Dns.DnsRrtype_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1">
		<A public="1" get="inline" set="null" expr="cast &quot;A&quot;" line="64" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "A"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>IPV4 addresses, default</haxe_doc>
		</A>
		<AAAA public="1" get="inline" set="null" expr="cast &quot;AAAA&quot;" line="69" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "AAAA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>IPV6 addresses</haxe_doc>
		</AAAA>
		<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="74" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "MX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>mail exchange records</haxe_doc>
		</MX>
		<TXT public="1" get="inline" set="null" expr="cast &quot;TXT&quot;" line="79" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "TXT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>text records</haxe_doc>
		</TXT>
		<SRV public="1" get="inline" set="null" expr="cast &quot;SRV&quot;" line="84" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "SRV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>SRV records</haxe_doc>
		</SRV>
		<PTR public="1" get="inline" set="null" expr="cast &quot;PTR&quot;" line="89" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "PTR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>used for reverse IP lookups</haxe_doc>
		</PTR>
		<NS public="1" get="inline" set="null" expr="cast &quot;NS&quot;" line="94" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "NS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>name server records</haxe_doc>
		</NS>
		<CNAME public="1" get="inline" set="null" expr="cast &quot;CNAME&quot;" line="99" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "CNAME"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>canonical name records</haxe_doc>
		</CNAME>
		<SOA public="1" get="inline" set="null" expr="cast &quot;SOA&quot;" line="104" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "SOA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>start of authority record</haxe_doc>
		</SOA>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.DnsResolvedAddressMX" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns">
		<a>
			<priority><x path="Int"/></priority>
			<exchange><c path="String"/></exchange>
		</a>
		<haxe_doc>Types of address data returned by `resolve` functions.</haxe_doc>
	</typedef>
	<typedef path="js.node.DnsResolvedAddressSRV" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<weight><x path="Int"/></weight>
	<priority><x path="Int"/></priority>
	<port><x path="Int"/></port>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="js.node.DnsResolvedAddressSOA" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<serial><x path="Int"/></serial>
	<retry><x path="Int"/></retry>
	<refresh><x path="Int"/></refresh>
	<nsname><c path="String"/></nsname>
	<minttl><x path="Int"/></minttl>
	<hostmaster><c path="String"/></hostmaster>
	<expire><x path="Int"/></expire>
</a></typedef>
	<typedef path="js.node.DnsResolvedAddress" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<t path="js.node.DnsResolvedAddressMX"/>
		<x path="haxe.extern.EitherType">
			<t path="js.node.DnsResolvedAddressSOA"/>
			<t path="js.node.DnsResolvedAddressSRV"/>
		</x>
	</x>
</x></typedef>
	<class path="js.node.DnsError" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns" extern="1">
		<extends path="js.Error"/>
		<code public="1" set="null">
			<e path="js.node.DnsErrorCode"/>
			<haxe_doc>Values for error codes are listed in `Dns` class.</haxe_doc>
		</code>
		<haxe_doc>Error objects returned by dns lookups are of this type</haxe_doc>
	</class>
	<enum path="js.node.DnsErrorCode" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns">
		<NODATA><haxe_doc>DNS server returned answer with no data.</haxe_doc></NODATA>
		<FORMERR><haxe_doc>DNS server claims query was misformatted.</haxe_doc></FORMERR>
		<SERVFAIL><haxe_doc>DNS server returned general failure.</haxe_doc></SERVFAIL>
		<NOTFOUND><haxe_doc>Domain name not found.</haxe_doc></NOTFOUND>
		<NOTIMP><haxe_doc>DNS server does not implement requested operation.</haxe_doc></NOTIMP>
		<REFUSED><haxe_doc>DNS server refused query.</haxe_doc></REFUSED>
		<BADQUERY><haxe_doc>Misformatted DNS query.</haxe_doc></BADQUERY>
		<BADNAME><haxe_doc>Misformatted domain name.</haxe_doc></BADNAME>
		<BADFAMILY><haxe_doc>Unsupported address family.</haxe_doc></BADFAMILY>
		<BADRESP><haxe_doc>Misformatted DNS reply.</haxe_doc></BADRESP>
		<CONNREFUSED><haxe_doc>Could not contact DNS servers.</haxe_doc></CONNREFUSED>
		<TIMEOUT><haxe_doc>Timeout while contacting DNS servers.</haxe_doc></TIMEOUT>
		<EOF><haxe_doc>End of file.</haxe_doc></EOF>
		<FILE><haxe_doc>Error reading file.</haxe_doc></FILE>
		<NOMEM><haxe_doc>Out of memory.</haxe_doc></NOMEM>
		<DESTRUCTION><haxe_doc>Channel is being destroyed.</haxe_doc></DESTRUCTION>
		<BADSTR><haxe_doc>Misformatted string.</haxe_doc></BADSTR>
		<BADFLAGS><haxe_doc>Illegal flags specified.</haxe_doc></BADFLAGS>
		<NONAME><haxe_doc>Given hostname is not numeric.</haxe_doc></NONAME>
		<BADHINTS><haxe_doc>Illegal hints flags specified.</haxe_doc></BADHINTS>
		<NOTINITIALIZED><haxe_doc>c-ares library initialization not yet performed.</haxe_doc></NOTINITIALIZED>
		<LOADIPHLPAPI><haxe_doc>Error loading iphlpapi.dll.</haxe_doc></LOADIPHLPAPI>
		<ADDRGETNETWORKPARAMS><haxe_doc>Could not find GetNetworkParams function.</haxe_doc></ADDRGETNETWORKPARAMS>
		<CANCELLED><haxe_doc>DNS query cancelled.</haxe_doc></CANCELLED>
		<haxe_doc>Each DNS query can return one of the following error codes</haxe_doc>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":jsRequire"><e>"dns"</e></m>
		</meta>
	</enum>
	<typedef path="js.node.DnsLookupCallbackSingle" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><f a="::">
	<c path="js.node.DnsError"/>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></typedef>
	<typedef path="js.node.DnsLookupCallbackAll" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><f a=":">
	<c path="js.node.DnsError"/>
	<c path="Array"><t path="js.node.DnsLookupCallbackAllEntry"/></c>
	<x path="Void"/>
</f></typedef>
	<typedef path="js.node.DnsLookupCallbackAllEntry" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<family><x path="js.node.DnsAddressFamily"/></family>
	<address><c path="String"/></address>
</a></typedef>
	<class path="js.node.Dns" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Dns.hx" extern="1">
		<lookup public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<t path="js.node.DnsLookupCallbackSingle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record.

		If `options` is not provided, then IP v4 and v6 addresses are both valid.

		The `family` can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.

		The `callback` has arguments (err, address, family).
		The `address` argument is a string representation of a IP v4 or v6 address.
		The `family` argument is either the integer 4 or 6 and denotes the family
		of address (not necessarily the value initially passed to lookup).

		With the `all` option set, the arguments change to (err, addresses), with addresses being an array of objects
		with the properties `address` and `family`.

		Keep in mind that `err.code` will be set to 'ENOENT' not only when the hostname does not exist but
		also when the lookup fails in other ways such as no available file descriptors.

		`lookup` doesn't necessarily have anything to do with the DNS protocol. It's only an operating system facility
		that can associate name with addresses, and vice versa.</haxe_doc>
			<overloads><lookup public="1" set="method">
	<f a="hostname:options:callback">
		<c path="String"/>
		<x path="haxe.extern.EitherType">
			<x path="js.node.DnsAddressFamily"/>
			<t path="js.node.DnsLookupOptions"/>
		</x>
		<x path="haxe.extern.EitherType">
			<t path="js.node.DnsLookupCallbackSingle"/>
			<t path="js.node.DnsLookupCallbackAll"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record.

		If `options` is not provided, then IP v4 and v6 addresses are both valid.

		The `family` can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.

		The `callback` has arguments (err, address, family).
		The `address` argument is a string representation of a IP v4 or v6 address.
		The `family` argument is either the integer 4 or 6 and denotes the family
		of address (not necessarily the value initially passed to lookup).

		With the `all` option set, the arguments change to (err, addresses), with addresses being an array of objects
		with the properties `address` and `family`.

		Keep in mind that `err.code` will be set to 'ENOENT' not only when the hostname does not exist but
		also when the lookup fails in other ways such as no available file descriptors.

		`lookup` doesn't necessarily have anything to do with the DNS protocol. It's only an operating system facility
		that can associate name with addresses, and vice versa.</haxe_doc>
</lookup></overloads>
		</lookup>
		<ADDRCONFIG public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A flag passed in the `hints` argument of `lookup` method.

		Returned address types are determined by the types of addresses supported by the current system.
		For example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured.
		Loopback addresses are not considered.</haxe_doc>
		</ADDRCONFIG>
		<V4MAPPED public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A flag passed in the `hints` argument of `lookup` method.

		If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses.
		Note that it is not supported on some operating systems (e.g FreeBSD 10.1).</haxe_doc>
		</V4MAPPED>
		<lookupService public="1" set="method" static="1">
			<f a="address:port:callback">
				<c path="String"/>
				<x path="Int"/>
				<f a="::">
					<c path="js.node.DnsError"/>
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves the given `address` and `port` into a hostname and service using `getnameinfo`.

		The `callback` has arguments (err, hostname, service).
		The `hostname` and `service` arguments are strings (e.g. 'localhost' and 'http' respectively).

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
		</lookupService>
		<resolve public="1" set="method" static="1">
			<f a="hostname:rrtype:callback">
				<c path="String"/>
				<x path="js.node.DnsRrtype"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddress"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into an array of the record types specified by `rrtype`.

		The `callback` has arguments (err, addresses).
		The type of each item in `addresses` is determined by the record type,
		and described in the documentation for the corresponding lookup methods below.

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
			<overloads><resolve public="1" set="method">
	<f a="hostname:callback">
		<c path="String"/>
		<f a=":">
			<c path="js.node.DnsError"/>
			<c path="Array"><t path="js.node.DnsResolvedAddress"/></c>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into an array of the record types specified by `rrtype`.

		The `callback` has arguments (err, addresses).
		The type of each item in `addresses` is determined by the record type,
		and described in the documentation for the corresponding lookup methods below.

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
</resolve></overloads>
		</resolve>
		<resolve4 public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for IPv4 queries (A records).
		`addresses` is an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).</haxe_doc>
		</resolve4>
		<resolve6 public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve4` except for IPv6 queries (an AAAA query).</haxe_doc>
		</resolve6>
		<resolveMx public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddressMX"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for mail exchange queries (MX records).
		`addresses` is an array of MX records, each with a priority
		and an exchange attribute (e.g. [{'priority': 10, 'exchange': 'mx.example.com'},...]).</haxe_doc>
		</resolveMx>
		<resolveTxt public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="Array"><c path="String"/></c></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for text queries (TXT records).
		`addresses` is a 2-d array of the text records available for hostname (e.g., [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]).
		Each sub-array contains TXT chunks of one record. Depending on the use case, the could be either joined together
		or treated separately.</haxe_doc>
		</resolveTxt>
		<resolveSrv public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddressSRV"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for service records (SRV records).
		`addresses` is an array of the SRV records available for `hostname`.
		Properties of SRV records are priority, weight, port, and name
		(e.g., [{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]).</haxe_doc>
		</resolveSrv>
		<resolveSoa public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<t path="js.node.DnsResolvedAddressSOA"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for start of authority record queries (SOA record).

		`addresses` is an object with the following structure:
		{
		  nsname: 'ns.example.com',
		  hostmaster: 'root.example.com',
		  serial: 2013101809,
		  refresh: 10000,
		  retry: 2400,
		  expire: 604800,
		  minttl: 3600
		}</haxe_doc>
		</resolveSoa>
		<resolveNs public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for name server records (NS records).
		`addresses` is an array of the name server records available for hostname (e.g., ['ns1.example.com', 'ns2.example.com']).</haxe_doc>
		</resolveNs>
		<resolveCname public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for canonical name records (CNAME records).
		`addresses` is an array of the canonical name records available for hostname (e.g., ['bar.example.com']).</haxe_doc>
		</resolveCname>
		<reverse public="1" set="method" static="1">
			<f a="ip:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Reverse resolves an `ip` address to an array of hostnames.
		The `callback` has arguments (err, hostname).</haxe_doc>
		</reverse>
		<getServers public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of IP addresses as strings that are currently being used for resolution.</haxe_doc>
		</getServers>
		<setServers public="1" set="method" static="1">
			<f a="servers">
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Given an array of IP addresses as strings, set them as the servers to use for resolving.

		If you specify a port with the address it will be stripped, as the underlying library doesn't support that.

		This will throw if you pass invalid input.</haxe_doc>
		</setServers>
		<haxe_doc>This module contains functions that belong to two different categories:

	1) Functions that use the underlying operating system facilities to perform name resolution,
	and that do not necessarily do any network communication. This category contains only one function: `lookup`.
	Developers looking to perform name resolution in the same way that other applications on the same operating
	system behave should use `lookup`.

	2) Functions that connect to an actual DNS server to perform name resolution,
	and that always use the network to perform DNS queries. This category contains all functions in the dns module but `lookup`.
	These functions do not use the same set of configuration files than what `lookup` uses. For instance,
	they do not use the configuration from /etc/hosts. These functions should be used by developers who do not want
	to use the underlying operating system's facilities for name resolution, and instead want to always perform DNS queries.</haxe_doc>
		<meta><m n=":jsRequire"><e>"dns"</e></m></meta>
	</class>
	<typedef path="js.node.CPUTime" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<user><x path="Int"/></user>
			<sys><x path="Int"/></sys>
			<nice><x path="Int"/></nice>
			<irq><x path="Int"/></irq>
			<idle><x path="Int"/></idle>
		</a>
		<haxe_doc>Object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq</haxe_doc>
	</typedef>
	<typedef path="js.node.CPU" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<times>
				<t path="js.node.CPUTime"/>
				<haxe_doc>CPUTime data.</haxe_doc>
			</times>
			<speed>
				<x path="Int"/>
				<haxe_doc>MHz Speed</haxe_doc>
			</speed>
			<model>
				<c path="String"/>
				<haxe_doc>CPU Model. E.g. 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</haxe_doc>
			</model>
		</a>
		<haxe_doc>Object containing information about each CPU/core installed: model, speed (in MHz), and times</haxe_doc>
	</typedef>
	<typedef path="js.node.NetworkInterface" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" module="js.node.Os">
		<c path="Array"><t path="js.node.NetworkInterfaceAddressInfo"/></c>
		<haxe_doc>Objects containing information about network interface addresses.</haxe_doc>
	</typedef>
	<typedef path="js.node.NetworkInterfaceAddressInfo" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" module="js.node.Os"><a>
	<internal>
		<x path="Bool"/>
		<haxe_doc>Whether this address is internal.</haxe_doc>
	</internal>
	<family>
		<c path="String"/>
		<haxe_doc>IP address family (e.g. IPv4, IPv6).</haxe_doc>
	</family>
	<address>
		<c path="String"/>
		<haxe_doc>IP address (format depends on family).</haxe_doc>
	</address>
</a></typedef>
	<abstract path="js.node.Endianness" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" module="js.node.Os">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Os.Endianness_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" private="1" module="js.node.Os" extern="1">
	<BigEndian public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="77" static="1">
		<x path="js.node.Endianness"/>
		<meta>
			<m n=":value"><e>cast "BE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BigEndian>
	<LittleEndian public="1" get="inline" set="null" expr="cast &quot;LE&quot;" line="78" static="1">
		<x path="js.node.Endianness"/>
		<meta>
			<m n=":value"><e>cast "LE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LittleEndian>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Os.Endianness_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" private="1" module="js.node.Os" extern="1">
		<BigEndian public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="77" static="1">
			<x path="js.node.Endianness"/>
			<meta>
				<m n=":value"><e>cast "BE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BigEndian>
		<LittleEndian public="1" get="inline" set="null" expr="cast &quot;LE&quot;" line="78" static="1">
			<x path="js.node.Endianness"/>
			<meta>
				<m n=":value"><e>cast "LE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LittleEndian>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.Os" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/Os.hx" extern="1">
		<EOL public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>A constant defining the appropriate End-of-line marker for the operating system.</haxe_doc>
		</EOL>
		<tmpdir public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the operating system's default directory for temp files.</haxe_doc>
		</tmpdir>
		<endianness public="1" set="method" static="1">
			<f a=""><x path="js.node.Endianness"/></f>
			<haxe_doc>Returns the endianness of the CPU. Possible values are "BE" or "LE".</haxe_doc>
		</endianness>
		<hostname public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the hostname of the operating system.</haxe_doc>
		</hostname>
		<type public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the operating system name.</haxe_doc>
		</type>
		<platform public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the operating system platform.</haxe_doc>
		</platform>
		<arch public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the operating system CPU architecture.</haxe_doc>
		</arch>
		<release public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the operating system release.</haxe_doc>
		</release>
		<uptime public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the system uptime in seconds.</haxe_doc>
		</uptime>
		<loadavg public="1" set="method" static="1">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>Returns an array containing the 1, 5, and 15 minute load averages.

		The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number.
		As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system.

		The load average is a very UNIX-y concept; there is no real equivalent on Windows platforms.
		That is why this function always returns [0, 0, 0] on Windows.</haxe_doc>
		</loadavg>
		<totalmem public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the total amount of system memory in bytes.</haxe_doc>
		</totalmem>
		<freemem public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the amount of free system memory in bytes.</haxe_doc>
		</freemem>
		<cpus public="1" set="method" static="1">
			<f a=""><c path="Array"><t path="js.node.CPU"/></c></f>
			<haxe_doc>Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz),
		and times (an object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq).</haxe_doc>
		</cpus>
		<networkInterfaces public="1" set="method" static="1">
			<f a=""><x path="haxe.DynamicAccess"><t path="js.node.NetworkInterface"/></x></f>
			<haxe_doc>Get a list of network interfaces:</haxe_doc>
		</networkInterfaces>
		<haxe_doc>Provides a few basic operating-system related utility functions.</haxe_doc>
		<meta><m n=":jsRequire"><e>"os"</e></m></meta>
	</class>
	<class path="js.node.buffer.Buffer" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/buffer/Buffer.hx" extern="1">
		<extends path="js.html.Uint8Array"/>
		<INSPECT_MAX_BYTES public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>How many bytes will be returned when `buffer.inspect()` is called.
		This can be overridden by user modules.
		Default: 50</haxe_doc>
		</INSPECT_MAX_BYTES>
		<get_INSPECT_MAX_BYTES get="inline" set="null" line="39" static="1"><f a=""><x path="Int"/></f></get_INSPECT_MAX_BYTES>
		<set_INSPECT_MAX_BYTES get="inline" set="null" line="42" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_INSPECT_MAX_BYTES>
		<isEncoding public="1" set="method" static="1">
			<f a="encoding">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the encoding is a valid encoding argument, or `false` otherwise.</haxe_doc>
		</isEncoding>
		<isBuffer public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if `obj` is a `Buffer`.</haxe_doc>
		</isBuffer>
		<byteLength public="1" set="method" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Gives the actual byte length of a string.

		`encoding` defaults to 'utf8'.

		This is not the same as `String.length` since that
		returns the number of characters in a string.</haxe_doc>
		</byteLength>
		<_byteLength public="1" get="inline" set="null" line="77" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"In haxe 3.3+, use Buffer.byteLength instead!"</e></m>
			</meta>
			<haxe_doc>Gives the actual byte length of a string.

		`encoding` defaults to 'utf8'.

		This is not the same as `String.length` since that
		returns the number of characters in a string.</haxe_doc>
		</_byteLength>
		<concat public="1" set="method" static="1">
			<f a="list:?totalLength">
				<c path="Array"><c path="js.node.buffer.Buffer"/></c>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a buffer which is the result of concatenating all the buffers in the `list` together.

		If the `list` has no items, or if the `totalLength` is 0, then it returns a zero-length buffer.
		If the `list` has exactly one item, then the first item of the `list` is returned.
		If the `list` has more than one item, then a new `Buffer` is created.

		If `totalLength` is not provided, it is read from the buffers in the `list`.
		However, this adds an additional loop to the function, so it is faster to provide the length explicitly.</haxe_doc>
		</concat>
		<compareBuffers public="1" set="method" static="1">
			<f a="buf1:buf2">
				<c path="js.node.buffer.Buffer"/>
				<c path="js.node.buffer.Buffer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"compare"</e></m></meta>
			<haxe_doc>The same as `buf1.compare(buf2)`. Useful for sorting an Array of Buffers.</haxe_doc>
		</compareBuffers>
		<hxFromBytes public="1" get="inline" set="null" line="490" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Create `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.
		Any modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.</haxe_doc>
		</hxFromBytes>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON-representation of the `Buffer` instance.</haxe_doc>
		</toJSON>
		<write public="1" set="method">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `string` to the buffer at `offset` using the given `encoding`.

		`offset` defaults to 0, encoding defaults to 'utf8'. `length` is the number of bytes to write.

		Returns number of octets written. If buffer did not contain enough space to fit the entire `string`,
		it will write a partial amount of the `string`. `length` defaults to `buffer.length - offset`.

		The method will not write partial characters.</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="string:offset:length:?encoding">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Writes `string` to the buffer at `offset` using the given `encoding`.

		`offset` defaults to 0, encoding defaults to 'utf8'. `length` is the number of bytes to write.

		Returns number of octets written. If buffer did not contain enough space to fit the entire `string`,
		it will write a partial amount of the `string`. `length` defaults to `buffer.length - offset`.

		The method will not write partial characters.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="string:offset:?encoding">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Writes `string` to the buffer at `offset` using the given `encoding`.

		`offset` defaults to 0, encoding defaults to 'utf8'. `length` is the number of bytes to write.

		Returns number of octets written. If buffer did not contain enough space to fit the entire `string`,
		it will write a partial amount of the `string`. `length` defaults to `buffer.length - offset`.

		The method will not write partial characters.</haxe_doc>
				</write>
			</overloads>
		</write>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Decodes and returns a string from buffer data encoded with `encoding` (defaults to 'utf8')
		beginning at `start` (defaults to 0) and ending at `end` (defaults to `buffer.length`).</haxe_doc>
			<overloads><toString public="1" set="method">
	<f a="encoding:?start:?end">
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<haxe_doc>Decodes and returns a string from buffer data encoded with `encoding` (defaults to 'utf8')
		beginning at `start` (defaults to 0) and ending at `end` (defaults to `buffer.length`).</haxe_doc>
</toString></overloads>
		</toString>
		<copy public="1" set="method">
			<f a="targetBuffer:?targetStart:?sourceStart:?sourceEnd">
				<c path="js.node.buffer.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Does copy between buffers.
		The source and target regions can be overlapped.
		`targetStart` and `sourceStart` default to 0. `sourceEnd` defaults to `buffer.length`.</haxe_doc>
		</copy>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new buffer which references the same memory as the old,
		but offset and cropped by the `start` (defaults to 0) and `end` (defaults to `buffer.length`) indexes.
		Negative indexes start from the end of the buffer.

		Modifying the new buffer slice will modify memory in the original buffer!</haxe_doc>
		</slice>
		<readUInt8 public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 8 bit integer from the buffer at the specified offset.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readUInt8>
		<readUInt16LE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16 bit integer from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readUInt16LE>
		<readUInt16BE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16 bit integer from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readUInt16BE>
		<readUInt32LE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32 bit integer from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readUInt32LE>
		<readUInt32BE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32 bit integer from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readUInt32BE>
		<readInt8 public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 8 bit integer from the buffer at the specified `offset`.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.

		Works as `readUInt8`, except buffer contents are treated as two's complement signed values.</haxe_doc>
		</readInt8>
		<readInt16LE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16 bit integer from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.

		Works as `readUInt16LE`, except buffer contents are treated as two's complement signed values.</haxe_doc>
		</readInt16LE>
		<readInt16BE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16 bit integer from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.

		Works as `readUInt16BE`, except buffer contents are treated as two's complement signed values.</haxe_doc>
		</readInt16BE>
		<readInt32LE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32 bit integer from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.

		Works as `readUInt32LE`, except buffer contents are treated as two's complement signed values.</haxe_doc>
		</readInt32LE>
		<readInt32BE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32 bit integer from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.

		Works as `readUInt32BE`, except buffer contents are treated as two's complement signed values.</haxe_doc>
		</readInt32BE>
		<readFloatLE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32 bit float from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readFloatLE>
		<readFloatBE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32 bit float from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readFloatBE>
		<readDoubleLE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64 bit double from the buffer at the specified `offset` with little-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readDoubleLE>
		<readDoubleBE public="1" set="method">
			<f a="offset:?noAssert">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64 bit double from the buffer at the specified `offset` with big-endian format.

		Set `noAssert` to `true` to skip validation of `offset`.
		This means that `offset` may be beyond the end of the buffer. Defaults to `false`.</haxe_doc>
		</readDoubleBE>
		<writeUInt8 public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset`.
		Note, `value` must be a valid unsigned 8 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeUInt8>
		<writeUInt16LE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, `value` must be a valid unsigned 16 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeUInt16LE>
		<writeUInt16BE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, `value` must be a valid unsigned 16 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeUInt16BE>
		<writeUInt32LE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, `value` must be a valid unsigned 32 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeUInt32LE>
		<writeUInt32BE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, `value` must be a valid unsigned 32 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeUInt32BE>
		<writeInt8 public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset`.
		Note, `value` must be a valid signed 8 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.

		Works as `writeUInt8`, except `value` is written out as a two's complement signed integer into buffer.</haxe_doc>
		</writeInt8>
		<writeInt16LE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, value must be a valid signed 16 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.

		Works as `writeUInt16LE`, except `value` is written out as a two's complement signed integer into buffer.</haxe_doc>
		</writeInt16LE>
		<writeInt16BE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, value must be a valid signed 16 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.

		Works as `writeUInt16BE`, except `value` is written out as a two's complement signed integer into buffer.</haxe_doc>
		</writeInt16BE>
		<writeInt32LE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, value must be a valid signed 32 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.

		Works as `writeUInt32LE`, except `value` is written out as a two's complement signed integer into buffer.</haxe_doc>
		</writeInt32LE>
		<writeInt32BE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, value must be a valid signed 32 bit integer.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.

		Works as `writeUInt32BE`, except `value` is written out as a two's complement signed integer into buffer.</haxe_doc>
		</writeInt32BE>
		<writeFloatLE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, behavior is unspecified if `value` is not a 32 bit float.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeFloatLE>
		<writeFloatBE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, behavior is unspecified if `value` is not a 32 bit float.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeFloatBE>
		<writeDoubleLE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with little-endian format.
		Note, `value` must be a valid 64 bit double.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeDoubleLE>
		<writeDoubleBE public="1" set="method">
			<f a="value:offset:?noAssert">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to the buffer at the specified `offset` with big-endian format.
		Note, `value` must be a valid 64 bit double.

		Set `noAssert` to `true` to skip validation of `value` and `offset`.
		This means that `value` may be too large for the specific function
		and `offset` may be beyond the end of the buffer leading to the values
		being silently dropped. This should not be used unless you are certain
		of correctness. Defaults to `false`.</haxe_doc>
		</writeDoubleBE>
		<fill public="1" set="method">
			<f a="value:?offset:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Fills the buffer with the specified `value`.
		If the `offset` (defaults to 0) and `end` (defaults to `buffer.length`)
		are not given it will fill the entire buffer.</haxe_doc>
			<overloads><fill public="1" set="method">
	<f a="value:?offset:?end">
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Fills the buffer with the specified `value`.
		If the `offset` (defaults to 0) and `end` (defaults to `buffer.length`)
		are not given it will fill the entire buffer.</haxe_doc>
</fill></overloads>
		</fill>
		<equals public="1" set="method">
			<f a="otherBuffer">
				<c path="js.node.buffer.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean of whether `this` and `otherBuffer` have the same bytes.</haxe_doc>
		</equals>
		<compare public="1" set="method">
			<f a="otherBuffer">
				<c path="js.node.buffer.Buffer"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a number indicating whether `this` comes before or after or is the same as the `otherBuffer` in sort order.</haxe_doc>
		</compare>
		<indexOf public="1" set="method">
			<f a="value:?byteOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Operates similar to `Array.indexOf`.

		Accepts a String, Buffer or Int.
		Strings are interpreted as UTF8.
		Buffers will use the entire buffer. So in order to compare a partial `Buffer` use `slice`.
		Int can range from 0 to 255.</haxe_doc>
			<overloads>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Operates similar to `Array.indexOf`.

		Accepts a String, Buffer or Int.
		Strings are interpreted as UTF8.
		Buffers will use the entire buffer. So in order to compare a partial `Buffer` use `slice`.
		Int can range from 0 to 255.</haxe_doc>
				</indexOf>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.node.buffer.Buffer"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Operates similar to `Array.indexOf`.

		Accepts a String, Buffer or Int.
		Strings are interpreted as UTF8.
		Buffers will use the entire buffer. So in order to compare a partial `Buffer` use `slice`.
		Int can range from 0 to 255.</haxe_doc>
				</indexOf>
			</overloads>
		</indexOf>
		<hxToBytes public="1" get="inline" set="null" line="482">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Create `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.
		Any modifications done using the returned object will be reflected in the `this` buffer.</haxe_doc>
		</hxToBytes>
		<new public="1" set="method">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new buffer.</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="string:?encoding">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allocates a new buffer.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="buffer">
						<c path="js.node.buffer.Buffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allocates a new buffer.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>Allocates a new buffer.</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The Buffer class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.

	It supports array access syntax to get and set the octet at index. The values refer to individual bytes,
	so the legal range is between 0x00 and 0xFF hex or 0 and 255.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"buffer"</e>
	<e>"Buffer"</e>
</m></meta>
	</class>
	<abstract path="js.node.events.EventEmitterEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<this><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by all `EventEmitter` instances.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1">
	<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="39" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a=":">
	<c path="String"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "newListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted any time someone adds a new listener.

		Listener arguments:
			event - The event name
			listener - The event handler function

		It is unspecified if listener is in the list returned by emitter.listeners(event).</haxe_doc>
	</NewListener>
	<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="50" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a=":">
	<c path="String"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "removeListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted any time someone removes a listener.

		Listener arguments:
			event - The event name
			listener - The event handler function

		It is unspecified if listener is in the list returned by emitter.listeners(event).</haxe_doc>
	</RemoveListener>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1">
		<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="39" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a=":">
	<c path="String"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "newListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted any time someone adds a new listener.

		Listener arguments:
			event - The event name
			listener - The event handler function

		It is unspecified if listener is in the list returned by emitter.listeners(event).</haxe_doc>
		</NewListener>
		<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="50" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a=":">
	<c path="String"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "removeListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted any time someone removes a listener.

		Listener arguments:
			event - The event name
			listener - The event handler function

		It is unspecified if listener is in the list returned by emitter.listeners(event).</haxe_doc>
		</RemoveListener>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.events.Event" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Abstract type for events. Its type parameter is a signature
	of a listener for a concrete event.</haxe_doc>
		<impl><class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1"/></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1"/>
	<class path="js.node.fs.Stats" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/fs/Stats.hx" extern="1">
		<dev public="1"><x path="Int"/></dev>
		<ino public="1"><x path="Float"/></ino>
		<mode public="1"><x path="Int"/></mode>
		<nlink public="1"><x path="Int"/></nlink>
		<uid public="1"><x path="Int"/></uid>
		<gid public="1"><x path="Int"/></gid>
		<rdev public="1"><x path="Int"/></rdev>
		<size public="1"><x path="Float"/></size>
		<blksize public="1"><t path="Null"><x path="Int"/></t></blksize>
		<blocks public="1"><t path="Null"><x path="Float"/></t></blocks>
		<atime public="1"><c path="Date"/></atime>
		<mtime public="1"><c path="Date"/></mtime>
		<ctime public="1"><c path="Date"/></ctime>
		<birthtime public="1"><c path="Date"/></birthtime>
		<isFile public="1" set="method"><f a=""><x path="Bool"/></f></isFile>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<isBlockDevice public="1" set="method"><f a=""><x path="Bool"/></f></isBlockDevice>
		<isCharacterDevice public="1" set="method"><f a=""><x path="Bool"/></f></isCharacterDevice>
		<isSymbolicLink public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Only valid with `Fs.lstat`.</haxe_doc>
		</isSymbolicLink>
		<isFIFO public="1" set="method"><f a=""><x path="Bool"/></f></isFIFO>
		<isSocket public="1" set="method"><f a=""><x path="Bool"/></f></isSocket>
		<haxe_doc>Objects returned from `Fs.stat`, `Fs.lstat` and `Fs.fstat` and their synchronous counterparts are of this type.</haxe_doc>
	</class>
	<abstract path="js.node.fs.WriteStreamEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/fs/WriteStream.hx" module="js.node.fs.WriteStream">
		<this><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1">
	<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="33" static="1">
		<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the `WriteStream`'s file is opened.

        Listener arguments:
            fd - file descriptor used by the `WriteStream`.</haxe_doc>
	</Open>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1">
		<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="33" static="1">
			<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the `WriteStream`'s file is opened.

        Listener arguments:
            fd - file descriptor used by the `WriteStream`.</haxe_doc>
		</Open>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.fs.WriteStream" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/fs/WriteStream.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.fs.WriteStream"/></extends>
		<haxe_doc>Writable file stream.</haxe_doc>
	</class>
	<abstract path="js.node.http.Method" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/Method.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible HTTP methods as described in
    http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._Method.Method_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/Method.hx" private="1" module="js.node.http.Method" extern="1">
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="29" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Get>
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="30" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Post>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="31" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Head>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="32" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Options>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="33" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="34" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="35" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Trace>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="36" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Connect>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._Method.Method_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/Method.hx" private="1" module="js.node.http.Method" extern="1">
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="29" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Get>
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="30" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Post>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="31" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Head>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="32" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Options>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="33" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="34" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="35" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Trace>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="36" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Connect>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.http.ServerResponseEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/ServerResponse.hx" module="js.node.http.ServerResponse">
		<this><x path="js.node.events.Event"><c path="js.node.http.ServerResponseEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.http.ServerResponseEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the `ServerResponse` objects in addition to its parent class events.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._ServerResponse.ServerResponseEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/ServerResponse.hx" private="1" module="js.node.http.ServerResponse" extern="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="36" static="1">
		<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Indicates that the underlying connection was terminated before `end` was called or able to flush.</haxe_doc>
	</Close>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="45" static="1">
		<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the response has been sent. More specifically, this event is emitted when
		the last segment of the response headers and body have been handed off to the operating system
		for transmission over the network. It does not imply that the client has received anything yet.

		After this event, no more events will be emitted on the response object.</haxe_doc>
	</Finish>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._ServerResponse.ServerResponseEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/http/ServerResponse.hx" private="1" module="js.node.http.ServerResponse" extern="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="36" static="1">
			<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Indicates that the underlying connection was terminated before `end` was called or able to flush.</haxe_doc>
		</Close>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="45" static="1">
			<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the response has been sent. More specifically, this event is emitted when
		the last segment of the response headers and body have been handed off to the operating system
		for transmission over the network. It does not imply that the client has received anything yet.

		After this event, no more events will be emitted on the response object.</haxe_doc>
		</Finish>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.net.SocketEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<this><x path="js.node.events.Event"><c path="js.node.net.SocketEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.net.SocketEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events for `Socket` objects.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.net._Socket.SocketEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1">
	<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="38" static="1">
		<x path="js.node.net.SocketEvent"><f a="::">
	<t path="Null"><c path="js.Error"/></t>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "lookup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted after resolving the hostname but before connecting.
		Not applicable to UNIX sockets.</haxe_doc>
	</Lookup>
	<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="43" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "connect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when a socket connection is successfully established. See `Socket.connect`.</haxe_doc>
	</Connect>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="52" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when data is received.
		The argument data will be a `Buffer` or `String`.
		Encoding of data is set by `Socket.setEncoding`.

		Note that the data will be lost if there is no listener when a Socket emits a 'data' event.</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="62" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the other end of the socket sends a FIN packet.

		By default (allowHalfOpen == false) the socket will destroy its file descriptor once
		it has written out its pending write queue. However, by setting allowHalfOpen == true
		the socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,
		with the caveat that the user is required to `end` their side now.</haxe_doc>
	</End>
	<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="70" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "timeout"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted if the socket times out from inactivity.
		This is only to notify that the socket has been idle
		The user must manually close the connection.
		See also: `Socket.setTimeout`</haxe_doc>
	</Timeout>
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="76" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the write buffer becomes empty. Can be used to throttle uploads.
		See also: the return values of `Socket.write`</haxe_doc>
	</Drain>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="81" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an error occurs. The 'close' event will be called directly following this event.</haxe_doc>
	</Error>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="90" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<x path="Bool"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted once the socket is fully closed.
		The argument `had_error` is a boolean which says if the socket was closed due to a transmission error.

		Listener arguments:
			had_error - true if the socket had a transmission error</haxe_doc>
	</Close>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.net._Socket.SocketEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1">
		<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="38" static="1">
			<x path="js.node.net.SocketEvent"><f a="::">
	<t path="Null"><c path="js.Error"/></t>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "lookup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted after resolving the hostname but before connecting.
		Not applicable to UNIX sockets.</haxe_doc>
		</Lookup>
		<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="43" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "connect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when a socket connection is successfully established. See `Socket.connect`.</haxe_doc>
		</Connect>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="52" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when data is received.
		The argument data will be a `Buffer` or `String`.
		Encoding of data is set by `Socket.setEncoding`.

		Note that the data will be lost if there is no listener when a Socket emits a 'data' event.</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="62" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the other end of the socket sends a FIN packet.

		By default (allowHalfOpen == false) the socket will destroy its file descriptor once
		it has written out its pending write queue. However, by setting allowHalfOpen == true
		the socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,
		with the caveat that the user is required to `end` their side now.</haxe_doc>
		</End>
		<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="70" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "timeout"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted if the socket times out from inactivity.
		This is only to notify that the socket has been idle
		The user must manually close the connection.
		See also: `Socket.setTimeout`</haxe_doc>
		</Timeout>
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="76" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the write buffer becomes empty. Can be used to throttle uploads.
		See also: the return values of `Socket.write`</haxe_doc>
		</Drain>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="81" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an error occurs. The 'close' event will be called directly following this event.</haxe_doc>
		</Error>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="90" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<x path="Bool"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted once the socket is fully closed.
		The argument `had_error` is a boolean which says if the socket was closed due to a transmission error.

		Listener arguments:
			had_error - true if the socket had a transmission error</haxe_doc>
		</Close>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.net.SocketOptionsBase" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket"><a><allowHalfOpen>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
	<haxe_doc>If true, then the socket won't automatically send a FIN packet
		when the other end of the socket sends a FIN packet.

		The socket becomes non-readable, but still writable. You should call the `end` method explicitly.
		See `end` event for more information.

		Default: false</haxe_doc>
</allowHalfOpen></a></typedef>
	<typedef path="js.node.net.SocketOptions" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<writable>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow writes on this socket (NOTE: Works only when `fd` is passed)</haxe_doc>
			</writable>
			<readable>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow reads on this socket (NOTE: Works only when `fd` is passed)</haxe_doc>
			</readable>
			<fd>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allows you to specify the existing file descriptor of socket.</haxe_doc>
			</fd>
			<allowHalfOpen>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If true, then the socket won't automatically send a FIN packet
		when the other end of the socket sends a FIN packet.

		The socket becomes non-readable, but still writable. You should call the `end` method explicitly.
		See `end` event for more information.

		Default: false</haxe_doc>
			</allowHalfOpen>
		</a>
		<haxe_doc>Options for creating new `Socket` object.</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketConnectOptionsTcp" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<port>
				<x path="Int"/>
				<haxe_doc>Port the client should connect to</haxe_doc>
			</port>
			<lookup>
				<t path="Null"><f a="::">
	<c path="String"/>
	<t path="js.node.DnsLookupOptions"/>
	<t path="js.node.DnsLookupCallbackSingle"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Custom lookup function. Defaults to `Dns.lookup`.</haxe_doc>
			</lookup>
			<localPort>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Local port to bind to for network connections.</haxe_doc>
			</localPort>
			<localAddress>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Local interface to bind to for network connections.</haxe_doc>
			</localAddress>
			<host>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Host the client should connect to.
		Defaults to 'localhost'.</haxe_doc>
			</host>
			<family>
				<t path="Null"><x path="js.node.DnsAddressFamily"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Version of IP stack. Defaults to 4.</haxe_doc>
			</family>
		</a>
		<haxe_doc>Options for the `Socket.connect` method (TCP version).</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketConnectOptionsUnix" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a><path>
	<c path="String"/>
	<haxe_doc>Path the client should connect to</haxe_doc>
</path></a>
		<haxe_doc>Options for the `Socket.connect` method (Local domain socket version).</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketAdress" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<port>
				<x path="Int"/>
				<haxe_doc>Connection port.</haxe_doc>
			</port>
			<family>
				<x path="js.node.net.SocketAdressFamily"/>
				<haxe_doc>IP Family.</haxe_doc>
			</family>
			<address>
				<c path="String"/>
				<haxe_doc>IP Address.</haxe_doc>
			</address>
		</a>
		<haxe_doc>Bound address, the address family name and port of the socket as reported by the operating system.</haxe_doc>
	</typedef>
	<abstract path="js.node.net.SocketAdressFamily" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible socket family values.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.net._Socket.SocketAdressFamily_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1">
	<IPv4 public="1" get="inline" set="null" expr="cast &quot;IPv4&quot;" line="198" static="1">
		<x path="js.node.net.SocketAdressFamily"/>
		<meta>
			<m n=":value"><e>cast "IPv4"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv4>
	<IPv6 public="1" get="inline" set="null" expr="cast &quot;IPv6&quot;" line="199" static="1">
		<x path="js.node.net.SocketAdressFamily"/>
		<meta>
			<m n=":value"><e>cast "IPv6"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv6>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.net._Socket.SocketAdressFamily_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1">
		<IPv4 public="1" get="inline" set="null" expr="cast &quot;IPv4&quot;" line="198" static="1">
			<x path="js.node.net.SocketAdressFamily"/>
			<meta>
				<m n=":value"><e>cast "IPv4"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv4>
		<IPv6 public="1" get="inline" set="null" expr="cast &quot;IPv6&quot;" line="199" static="1">
			<x path="js.node.net.SocketAdressFamily"/>
			<meta>
				<m n=":value"><e>cast "IPv6"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv6>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.Duplex" params="TSelf" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Duplex.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.stream.Duplex.TSelf"/></extends>
		<write public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
			</f>
			<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="chunk:?callback">
						<t path="js.node.Buffer"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
					</f>
					<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="chunk:?callback">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
					</f>
					<haxe_doc>This method writes some data to the underlying system,
		and calls the supplied callback once the data has been fully handled.

		The return value indicates if you should continue writing right now. If the data had to be buffered internally,
		then it will return `false`. Otherwise, it will return `true`.

		This return value is strictly advisory. You MAY continue to write, even if it returns `false`.
		However, writes will be buffered in memory, so it is best not to do this excessively.
		Instead, wait for the `drain` event before writing more data.</haxe_doc>
				</write>
			</overloads>
		</write>
		<end public="1" set="method">
			<f a="chunk:encoding:?callback">
				<c path="String"/>
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
			<overloads>
				<end public="1" set="method">
					<f a="?callback">
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
				</end>
				<end public="1" set="method">
					<f a="chunk:?callback">
						<t path="js.node.Buffer"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc>Call this method when no more data will be written to the stream.
		If supplied, the callback is attached as a listener on the `finish` event.

		Calling `write()` after calling `end()` will raise an error.</haxe_doc>
				</end>
			</overloads>
		</end>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal write streams (i.e. process.stdout) have this property set to true.
		It is false for any other write streams.</haxe_doc>
		</isTTY>
		<_write set="method">
			<f a="chunk:encoding:callback">
				<t path="js.node.Buffer"/>
				<c path="String"/>
				<f a="">
					<c path="js.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads><_write set="method"><f a="chunk:encoding:callback">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="js.Error"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></_write></overloads>
		</_write>
		<new set="method"><f a="?options">
	<t path="js.node.stream.DuplexNewOptions"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.

	Use relevant event enumeration types from `Readable` and `Writable` modules.

	Examples of `Duplex` streams include:
		- tcp sockets
		- zlib streams
		- crypto streams</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Duplex"</e>
</m></meta>
	</class>
	<class path="js.node.net.Socket" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/net/Socket.hx" extern="1">
		<extends path="js.node.stream.Duplex"><c path="js.node.net.Socket"/></extends>
		<connect public="1" set="method">
			<f a="options:?connectListener">
				<x path="haxe.extern.EitherType">
					<t path="js.node.net.SocketConnectOptionsTcp"/>
					<t path="js.node.net.SocketConnectOptionsUnix"/>
				</x>
				<f a=""><x path="Void"/></f>
				<c path="js.node.net.Socket"/>
			</f>
			<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
			<overloads>
				<connect public="1" set="method">
					<f a="path:?connectListener">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:?connectListener">
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:host:?connectListener">
						<x path="Int"/>
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
			</overloads>
		</connect>
		<bufferSize public="1">
			<x path="Int"/>
			<haxe_doc>`Socket` has the property that `socket.write` always works. This is to help users get up and running quickly.
		The computer cannot always keep up with the amount of data that is written to a socket - the network connection
		simply might be too slow. Node will internally queue up the data written to a socket and send it out over the
		wire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).

		The consequence of this internal buffering is that memory may grow. This property shows the number of characters
		currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written,
		but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)

		Users who experience large or growing `bufferSize` should attempt to "throttle" the data flows
		in their program with `pause` and `resume`.</haxe_doc>
		</bufferSize>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).</haxe_doc>
		</destroy>
		<setTimeout public="1" set="method">
			<f a="timeout:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the socket to timeout after `timeout` milliseconds of inactivity on the socket.
		By default `Socket` do not have a timeout.

		When an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed.
		The user must manually `end` or `destroy` the socket.

		If `timeout` is 0, then the existing idle timeout is disabled.

		The optional `callback` parameter will be added as a one time listener for the 'timeout' event.</haxe_doc>
		</setTimeout>
		<setNoDelay public="1" set="method">
			<f a="?noDelay">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables the Nagle algorithm.
		By default TCP connections use the Nagle algorithm, they buffer data before sending it off.
		Setting true for `noDelay` will immediately fire off data each time `write` is called.
		`noDelay` defaults to true.</haxe_doc>
		</setNoDelay>
		<setKeepAlive public="1" set="method">
			<f a="enable:?initialDelay">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enable/disable keep-alive functionality, and optionally set the initial delay
		before the first keepalive probe is sent on an idle socket.

		`enable` defaults to false.

		Set `initialDelay` (in milliseconds) to set the delay between the last data packet received and
		the first keepalive probe.

		Setting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.
		Defaults to 0.</haxe_doc>
			<overloads><setKeepAlive public="1" set="method">
	<f a="?initialDelay">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Enable/disable keep-alive functionality, and optionally set the initial delay
		before the first keepalive probe is sent on an idle socket.

		`enable` defaults to false.

		Set `initialDelay` (in milliseconds) to set the delay between the last data packet received and
		the first keepalive probe.

		Setting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.
		Defaults to 0.</haxe_doc>
</setKeepAlive></overloads>
		</setKeepAlive>
		<address public="1" set="method">
			<f a=""><t path="js.node.net.SocketAdress"/></f>
			<haxe_doc>Returns the bound address, the address family name and port of the socket as reported by the operating system.</haxe_doc>
		</address>
		<unref public="1" set="method">
			<f a=""><c path="js.node.net.Socket"/></f>
			<haxe_doc>Calling `unref` on a socket will allow the program to exit if this is the only active socket in the event system.
		If the socket is already `unref`d calling `unref` again will have no effect.</haxe_doc>
		</unref>
		<ref public="1" set="method">
			<f a=""><c path="js.node.net.Socket"/></f>
			<haxe_doc>Opposite of `unref`, calling `ref` on a previously `unref`d socket will not let the program exit
		if it's the only socket left (the default behavior).
		If the socket is `ref`d calling `ref` again will have no effect.</haxe_doc>
		</ref>
		<remoteAddress public="1" set="null">
			<c path="String"/>
			<haxe_doc>The string representation of the remote IP address.
		For example, '74.125.127.100' or '2001:4860:a005::68'.</haxe_doc>
		</remoteAddress>
		<remoteFamily public="1" set="null">
			<x path="js.node.net.SocketAdressFamily"/>
			<haxe_doc>The string representation of the remote IP family.
		'IPv4' or 'IPv6'.</haxe_doc>
		</remoteFamily>
		<remotePort public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The numeric representation of the remote port. For example, 80 or 21.</haxe_doc>
		</remotePort>
		<localAddress public="1" set="null">
			<c path="String"/>
			<haxe_doc>The string representation of the local IP address the remote client is connecting on.
		For example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1',
		the value would be '192.168.1.1'.</haxe_doc>
		</localAddress>
		<localPort public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The numeric representation of the local port. For example, 80 or 21.</haxe_doc>
		</localPort>
		<bytesRead public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The amount of received bytes.</haxe_doc>
		</bytesRead>
		<bytesWritten public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The amount of bytes sent.</haxe_doc>
		</bytesWritten>
		<encrypted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Always true for TLSSocket instances.

		May be used to distinguish TLS sockets from regular ones.</haxe_doc>
		</encrypted>
		<new public="1" set="method">
			<f a="?options">
				<t path="js.node.net.SocketOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new socket object.</haxe_doc>
		</new>
		<meta><m n=":jsRequire">
	<e>"net"</e>
	<e>"Socket"</e>
</m></meta>
	</class>
	<typedef path="js.node.stream.DuplexNewOptions" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Duplex.hx" module="js.node.stream.Duplex">
		<a>
			<objectMode>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</objectMode>
			<highWaterMark>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</highWaterMark>
			<encoding>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</encoding>
			<decodeStrings>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</decodeStrings>
			<allowHalfOpen>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</allowHalfOpen>
		</a>
		<haxe_doc>Options for `Duplex` private constructor.
	For stream implementors only, see node.js API documentation</haxe_doc>
	</typedef>
	<class path="js.node.stream.IDuplex" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Duplex.hx" module="js.node.stream.Duplex" extern="1" interface="1"><meta><m n=":remove"/></meta></class>
	<abstract path="js.node.stream.ReadableEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the `Readable` class.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1">
	<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="42" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "readable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>When a chunk of data can be read from the stream, it will emit a `readable` event.

		In some cases, listening for a `readable` event will cause some data to be read into
		the internal buffer from the underlying system, if it hadn't already.

		Once the internal buffer is drained, a 'readable' event will fire again when more data is available.</haxe_doc>
	</Readable>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="50" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If you attach a 'data' event listener, then it will switch the stream into flowing mode,
		and data will be passed to your handler as soon as it is available.

		If you just want to get all the data out of the stream as fast as possible, this is the best way to do so.</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="58" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event fires when there will be no more data to read.

		Note that the 'end' event will not fire unless the data is completely consumed.
		This can be done by switching into flowing mode, or by calling 'read' repeatedly until you get to the end.</haxe_doc>
	</End>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="65" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the underlying resource (for example, the backing file descriptor) has been closed.

		Not all streams will emit this.</haxe_doc>
	</Close>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="70" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted if there was an error receiving data.</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1">
		<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="42" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "readable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>When a chunk of data can be read from the stream, it will emit a `readable` event.

		In some cases, listening for a `readable` event will cause some data to be read into
		the internal buffer from the underlying system, if it hadn't already.

		Once the internal buffer is drained, a 'readable' event will fire again when more data is available.</haxe_doc>
		</Readable>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="50" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If you attach a 'data' event listener, then it will switch the stream into flowing mode,
		and data will be passed to your handler as soon as it is available.

		If you just want to get all the data out of the stream as fast as possible, this is the best way to do so.</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="58" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event fires when there will be no more data to read.

		Note that the 'end' event will not fire unless the data is completely consumed.
		This can be done by switching into flowing mode, or by calling 'read' repeatedly until you get to the end.</haxe_doc>
		</End>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="65" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the underlying resource (for example, the backing file descriptor) has been closed.

		Not all streams will emit this.</haxe_doc>
		</Close>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="70" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted if there was an error receiving data.</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.ReadableNewOptions" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<a>
			<objectMode>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</objectMode>
			<highWaterMark>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</highWaterMark>
			<encoding>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</encoding>
		</a>
		<haxe_doc>Options for `Readable` private constructor.
	For stream implementors only, see node.js API documentation</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.WritableEvent" params="T" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration for `Writable` class events.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1">
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="38" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a `writable.write(chunk)` call returns `false`, then the `drain` event will indicate
		when it is appropriate to begin writing more data to the stream.</haxe_doc>
	</Drain>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="43" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>When the `end()` method has been called, and all data has been flushed to the underlying system, this event is emitted.</haxe_doc>
	</Finish>
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="52" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Lister arguments:
			src - source stream that is piping to `this` writable

		This is emitted whenever the `pipe()` method is called on a readable stream,
		adding `this` writable to its set of destinations.</haxe_doc>
	</Pipe>
	<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="61" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "unpipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Listener arguments:
			src - source stream that unpiped `this` writable

		This is emitted whenever the `unpipe()` method is called on a readable stream,
		removing `this` writable from its set of destinations.</haxe_doc>
	</Unpipe>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="66" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted if there was an error when writing or piping data.</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1">
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="38" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a `writable.write(chunk)` call returns `false`, then the `drain` event will indicate
		when it is appropriate to begin writing more data to the stream.</haxe_doc>
		</Drain>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="43" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>When the `end()` method has been called, and all data has been flushed to the underlying system, this event is emitted.</haxe_doc>
		</Finish>
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="52" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Lister arguments:
			src - source stream that is piping to `this` writable

		This is emitted whenever the `pipe()` method is called on a readable stream,
		adding `this` writable to its set of destinations.</haxe_doc>
		</Pipe>
		<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="61" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "unpipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Listener arguments:
			src - source stream that unpiped `this` writable

		This is emitted whenever the `unpipe()` method is called on a readable stream,
		removing `this` writable from its set of destinations.</haxe_doc>
		</Unpipe>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="66" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted if there was an error when writing or piping data.</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.WritableNewOptions" params="" file="/Users/francoponticelli/projects/hxnodejs/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<a>
			<objectMode>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</objectMode>
			<highWaterMark>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</highWaterMark>
			<decodeStrings>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</decodeStrings>
		</a>
		<haxe_doc>Options for `Writable` private constructor.
	For stream implementors only, see node.js API documentation</haxe_doc>
	</typedef>
	<class path="mw.BasicAuth" params="" file="src/mw/BasicAuth.hx">
		<BASIC expr="&quot;Basic&quot;" line="13" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"Basic"</e></m></meta>
		</BASIC>
		<AUTHORIZATION expr="&quot;authorization&quot;" line="14" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"authorization"</e></m></meta>
		</AUTHORIZATION>
		<WWW_AUTHENTICATE expr="&quot;WWW-Authenticate&quot;" line="15" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"WWW-Authenticate"</e></m></meta>
		</WWW_AUTHENTICATE>
		<REALM expr="&quot;realm&quot;" line="16" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"realm"</e></m></meta>
		</REALM>
		<create public="1" set="method" line="18" static="1"><f a="realm:authenticator">
	<c path="String"/>
	<f a=":::">
		<c path="String"/>
		<c path="String"/>
		<c path="express.Request"/>
		<f a="">
			<t path="Null"><c path="js.Error"/></t>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<f a="::">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<x path="Void"/>
	</f>
</f></create>
		<send401 set="method" line="76" static="1"><f a="res:realm">
	<c path="express.Response"/>
	<c path="String"/>
	<x path="Void"/>
</f></send401>
		<send403 set="method" line="81" static="1"><f a="res:message">
	<c path="express.Response"/>
	<c path="String"/>
	<x path="Void"/>
</f></send403>
	</class>
	<class path="mw.BearerTokenAuth" params="" file="src/mw/BearerTokenAuth.hx">
		<AUTHORIZATION expr="&quot;authorization&quot;" line="10" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"authorization"</e></m></meta>
		</AUTHORIZATION>
		<BEARER expr="&quot;Bearer&quot;" line="11" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"Bearer"</e></m></meta>
		</BEARER>
		<create public="1" set="method" line="13" static="1"><f a="authenticator">
	<f a="::">
		<c path="String"/>
		<c path="express.Request"/>
		<f a="">
			<t path="Null"><c path="js.Error"/></t>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<f a="::">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<x path="Void"/>
	</f>
</f></create>
		<send401 set="method" line="57" static="1"><f a="res:message">
	<c path="express.Response"/>
	<c path="String"/>
	<x path="Void"/>
</f></send401>
		<send403 set="method" line="61" static="1"><f a="res:message">
	<c path="express.Response"/>
	<c path="String"/>
	<x path="Void"/>
</f></send403>
	</class>
	<class path="mw.BodyParser" params="" file="src/mw/BodyParser.hx" extern="1">
		<json public="1" set="method" static="1"><f a="?options">
	<t path="mw.bodyparser.JsonOptions"/>
	<x path="express.Middleware"/>
</f></json>
		<raw public="1" set="method" static="1"><f a="?options">
	<t path="mw.bodyparser.RawOptions"/>
	<x path="express.Middleware"/>
</f></raw>
		<text public="1" set="method" static="1"><f a="?options">
	<t path="mw.bodyparser.TextOptions"/>
	<x path="express.Middleware"/>
</f></text>
		<urlencoded public="1" set="method" static="1"><f a="?options">
	<t path="mw.bodyparser.UrlEncodedOptions"/>
	<x path="express.Middleware"/>
</f></urlencoded>
		<meta><m n=":jsRequire"><e>"body-parser"</e></m></meta>
	</class>
	<class path="mw.Busboy" params="" file="src/mw/Busboy.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options">
				<t path="mw.busboy.Options"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"connect-busboy"</e></m></meta>
	</class>
	<class path="mw.Compression" params="" file="src/mw/Compression.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options">
				<t path="mw.compression.CompressionOptions"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"compression"</e></m></meta>
	</class>
	<class path="mw.CookieParser" params="" file="src/mw/CookieParser.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?secret:?options">
				<c path="String"/>
				<a><decode>
	<t path="Null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></t>
	<meta><m n=":optional"/></meta>
</decode></a>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<JSONCookie public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<d/>
</f></JSONCookie>
		<JSONCookies public="1" set="method" static="1"><f a="cookies">
	<a/>
	<a/>
</f></JSONCookies>
		<signedCookie public="1" set="method" static="1"><f a="str:secret">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></signedCookie>
		<signedCookies public="1" set="method" static="1"><f a="cookies:secret">
	<a/>
	<c path="String"/>
	<a/>
</f></signedCookies>
		<meta><m n=":jsRequire"><e>"cookie-parser"</e></m></meta>
	</class>
	<class path="mw.CookieSession" params="" file="src/mw/CookieSession.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options:?cookieOptions">
				<t path="mw.cookiesession.SessionOptions"/>
				<t path="mw.cookiesession.CookieOptions"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"cookie-session"</e></m></meta>
	</class>
	<class path="mw.Cors" params="" file="src/mw/Cors.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options">
				<t path="mw.cors.Options"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"cors"</e></m></meta>
	</class>
	<class path="mw.ExpressBrute" params="" file="src/mw/ExpressBrute.hx" extern="1">
		<FailTooManyRequests public="1" set="method" static="1"><f a="req:res:next:nextValidRequestDate">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<c path="Date"/>
	<x path="Void"/>
</f></FailTooManyRequests>
		<FailForbidden public="1" set="method" static="1"><f a="req:res:next:nextValidRequestDate">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<c path="Date"/>
	<x path="Void"/>
</f></FailForbidden>
		<FailMark public="1" set="method" static="1"><f a="req:res:next:nextValidRequestDate">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<c path="Date"/>
	<x path="Void"/>
</f></FailMark>
		<prevent public="1" set="method"><f a="req:res:next">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<x path="Void"/>
</f></prevent>
		<getMiddleware public="1" set="method"><f a="options">
	<t path="mw.expressbrute.MiddlewareOptions"/>
	<x path="express.Middleware"/>
</f></getMiddleware>
		<reset public="1" set="method"><f a="ip:key:next">
	<c path="String"/>
	<c path="String"/>
	<x path="express.Next"/>
	<x path="Void"/>
</f></reset>
		<getIPFromRequest public="1" set="method"><f a="req">
	<c path="express.Request"/>
	<c path="String"/>
</f></getIPFromRequest>
		<new public="1" set="method"><f a="store:?options">
	<c path="mw.expressbrute.Store"/>
	<t path="mw.expressbrute.Options"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":jsRequire"><e>"express-brute"</e></m></meta>
	</class>
	<class path="mw.ExpressForceSSL" params="" file="src/mw/ExpressForceSSL.hx" extern="1">
		<instance public="1" set="null" static="1">
			<x path="express.Middleware"/>
			<meta><m n=":selfCall"/></meta>
		</instance>
		<meta><m n=":jsRequire"><e>"express-force-ssl"</e></m></meta>
	</class>
	<class path="mw.FavIcon" params="" file="src/mw/Favicon.hx" module="mw.Favicon" extern="1">
		<create public="1" set="method" static="1">
			<f a="path:?options">
				<c path="String"/>
				<a><maxAge><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></maxAge></a>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"serve-favicon"</e></m></meta>
	</class>
	<class path="mw.Jwt" params="" file="src/mw/Jwt.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options">
				<t path="mw.jwt.Options"/>
				<t path="mw.UnlessMiddleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"express-jwt"</e></m></meta>
	</class>
	<class path="mw.Morgan" params="" file="src/mw/Morgan.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="format:?options">
				<c path="String"/>
				<t path="mw.morgan.Options"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<token public="1" set="method" static="1"><f a="type:callback">
	<c path="String"/>
	<f a=":">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<c path="String"/>
	</f>
	<x path="Void"/>
</f></token>
		<meta><m n=":jsRequire"><e>"morgan"</e></m></meta>
	</class>
	<class path="mw.OnFinished" params="" file="src/mw/OnFinished.hx" extern="1">
		<request public="1" set="method" static="1">
			<f a="res:callback">
				<c path="express.Response"/>
				<f a=":">
					<t path="Null"><c path="js.Error"/></t>
					<c path="express.Response"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":override"><e><![CDATA[function(req:Request, callback:Null<Error> -> Request):Void { }]]></e></m>
				<m n=":selfCall"/>
			</meta>
		</request>
		<isFinished public="1" set="method" static="1">
			<f a="res">
				<c path="express.Response"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":override"><e>function(req:Request):Bool { }</e></m></meta>
		</isFinished>
		<meta><m n=":jsRequire"><e>"on-finished"</e></m></meta>
	</class>
	<class path="mw.Passport" params="" file="src/mw/Passport.hx" extern="1">
		<use public="1" set="method" static="1"><f a="?name:strategy">
	<c path="String"/>
	<c path="mw.passport.Strategy"><d/></c>
	<c path="mw.Passport"/>
</f></use>
		<unuse public="1" set="method" static="1"><f a="name">
	<c path="String"/>
	<c path="mw.Passport"/>
</f></unuse>
		<initialize public="1" set="method" static="1"><f a="?options">
	<d/>
	<x path="express.Middleware"/>
</f></initialize>
		<authenticate public="1" set="method" static="1"><f a="strategy:?options:callback">
	<c path="String"/>
	<d/>
	<d/>
	<x path="express.Middleware"/>
</f></authenticate>
		<authorize public="1" set="method" static="1"><f a="strategy:?options:callback">
	<c path="String"/>
	<d/>
	<d/>
	<x path="express.Middleware"/>
</f></authorize>
		<session public="1" set="method" static="1"><f a="?options">
	<d/>
	<x path="express.Middleware"/>
</f></session>
		<serializeUser public="1" set="method" static="1"><f a="callback">
	<d/>
	<x path="Void"/>
</f></serializeUser>
		<deserializeUser public="1" set="method" static="1"><f a="callback">
	<d/>
	<x path="Void"/>
</f></deserializeUser>
		<transformAuthInfo public="1" set="method" static="1"><f a="callback">
	<d/>
	<x path="Void"/>
</f></transformAuthInfo>
		<meta><m n=":jsRequire"><e>"passport"</e></m></meta>
	</class>
	<class path="mw.SSLOnly" params="" file="src/mw/SSLOnly.hx"><create public="1" set="method" line="10" static="1"><f a=""><f a="::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<x path="Void"/>
</f></f></create></class>
	<class path="mw.Slash" params="" file="src/mw/Slash.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?statusCode">
				<x path="Int"/>
				<x path="express.Middleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"express-slash"</e></m></meta>
	</class>
	<class path="mw.Uncapitalize" params="" file="src/mw/Uncapitalize.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><x path="express.Middleware"/></f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"express-uncapitalize"</e></m></meta>
	</class>
	<class path="mw.Unless" params="" file="src/mw/Unless.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a="?options">
				<t path="mw.UnlessOptions"/>
				<t path="mw.UnlessMiddleware"/>
			</f>
			<meta><m n=":selfCall"/></meta>
		</create>
		<meta><m n=":jsRequire"><e>"express-unless"</e></m></meta>
	</class>
	<typedef path="mw.UnlessOptions" params="" file="src/mw/Unless.hx" module="mw.Unless"><a>
	<useOriginalUrl>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</useOriginalUrl>
	<path>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.RegExp"/>
		<c path="Array"><c path="String"/></c>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</path>
	<method>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</method>
	<ext>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</ext>
	<custom>
		<t path="Null"><f a="">
	<c path="express.Request"/>
	<x path="Bool"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</custom>
</a></typedef>
	<typedef path="mw.UnlessMiddleware" params="" file="src/mw/Unless.hx" module="mw.Unless"><x path="haxe.extern.EitherType">
	<x path="express.Middleware"/>
	<c path="mw.Unless"/>
</x></typedef>
	<typedef path="mw.bodyparser.JsonOptions" params="" file="src/mw/bodyparser/JsonOptions.hx"><a>
	<verify>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<t path="js.node.Buffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</verify>
	<type>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<f a="">
		<c path="express.Request"/>
		<x path="Bool"/>
	</f>
</x></t>
		<meta><m n=":optional"/></meta>
	</type>
	<strict>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</strict>
	<reviver>
		<t path="Null"><f a=":">
	<c path="String"/>
	<d/>
	<d/>
</f></t>
		<meta><m n=":optional"/></meta>
	</reviver>
	<limit>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Int"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</limit>
	<inflate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</inflate>
</a></typedef>
	<typedef path="mw.bodyparser.RawOptions" params="" file="src/mw/bodyparser/RawOptions.hx"><a>
	<verify>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<t path="js.node.Buffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</verify>
	<type>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<f a="">
		<c path="express.Request"/>
		<x path="Bool"/>
	</f>
</x></t>
		<meta><m n=":optional"/></meta>
	</type>
	<limit>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Int"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</limit>
	<inflate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</inflate>
</a></typedef>
	<typedef path="mw.bodyparser.TextOptions" params="" file="src/mw/bodyparser/TextOptions.hx"><a>
	<verify>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<t path="js.node.Buffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</verify>
	<type>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<f a="">
		<c path="express.Request"/>
		<x path="Bool"/>
	</f>
</x></t>
		<meta><m n=":optional"/></meta>
	</type>
	<limit>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Int"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</limit>
	<inflate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</inflate>
	<defaultCharset>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</defaultCharset>
</a></typedef>
	<typedef path="mw.bodyparser.UrlEncodedOptions" params="" file="src/mw/bodyparser/UrlEncodedOptions.hx"><a>
	<verify>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<t path="js.node.Buffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</verify>
	<type>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<f a="">
		<c path="express.Request"/>
		<x path="Bool"/>
	</f>
</x></t>
		<meta><m n=":optional"/></meta>
	</type>
	<parameterLimit>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</parameterLimit>
	<limit>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Int"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</limit>
	<inflate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</inflate>
	<extended><x path="Bool"/></extended>
</a></typedef>
	<typedef path="mw.busboy.Options" params="" file="src/mw/busboy/Options.hx"><a>
	<limits>
		<t path="Null"><a>
	<parts>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</parts>
	<headerPairs>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</headerPairs>
	<files>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</files>
	<fileSize>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</fileSize>
	<fields>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</fields>
	<fieldSize>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</fieldSize>
	<fieldNameSize>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</fieldNameSize>
</a></t>
		<meta><m n=":optional"/></meta>
	</limits>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</immediate>
	<highWaterMark>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</highWaterMark>
	<fileHwm>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</fileHwm>
	<defCharset>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</defCharset>
</a></typedef>
	<typedef path="mw.compression.CompressionOptions" params="" file="src/mw/compression/CompressionOptions.hx"><a>
	<windowBits>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</windowBits>
	<threshold>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<x path="Bool"/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</threshold>
	<strategy>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</strategy>
	<memLevel>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</memLevel>
	<level>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</level>
	<filter>
		<t path="Null"><f a=":">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="Bool"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</filter>
	<chunkSize>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</chunkSize>
</a></typedef>
	<typedef path="mw.cookiesession.CookieOptions" params="" file="src/mw/cookiesession/CookieOptions.hx"><a>
	<signed>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</signed>
	<secureProxy>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</secureProxy>
	<secure>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</secure>
	<path>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</path>
	<overwrite>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</overwrite>
	<maxAge>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</maxAge>
	<httpOnly>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</httpOnly>
	<expires>
		<t path="Null"><c path="Date"/></t>
		<meta><m n=":optional"/></meta>
	</expires>
	<domain>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</domain>
</a></typedef>
	<typedef path="mw.cookiesession.SessionOptions" params="" file="src/mw/cookiesession/SessionOptions.hx"><a>
	<secret>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</secret>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<keys>
		<t path="Null"><c path="Array"><c path="String"/></c></t>
		<meta><m n=":optional"/></meta>
	</keys>
</a></typedef>
	<typedef path="mw.cors.Options" params="" file="src/mw/cors/Options.hx"><a>
	<origin>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<t path="mw.cors.OriginFunction"/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</origin>
	<methods>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</methods>
	<maxAge>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</maxAge>
	<exposedHeaders>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</exposedHeaders>
	<credentials>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</credentials>
	<allowedHeaders>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</allowedHeaders>
</a></typedef>
	<typedef path="mw.cors.OriginFunction" params="" file="src/mw/cors/Options.hx" module="mw.cors.Options"><f a=":">
	<c path="String"/>
	<f a=":">
		<c path="js.Error"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></typedef>
	<typedef path="mw.expressbrute.MiddlewareOptions" params="" file="src/mw/expressbrute/MiddlewareOptions.hx"><a>
	<key><x path="haxe.extern.EitherType">
	<c path="String"/>
	<f a="::">
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<x path="Void"/>
	</f>
</x></key>
	<failCallback>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<c path="Date"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</failCallback>
</a></typedef>
	<typedef path="mw.expressbrute.Options" params="" file="src/mw/expressbrute/Options.hx"><a>
	<refreshTimeoutOnRequest>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</refreshTimeoutOnRequest>
	<proxyDepth>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</proxyDepth>
	<minWait>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</minWait>
	<maxWait>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</maxWait>
	<lifetime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</lifetime>
	<handleStoreError>
		<t path="Null"><x path="haxe.extern.EitherType">
	<f a="::">
		<a>
			<parent><c path="js.Error"/></parent>
			<message><c path="String"/></message>
		</a>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<f a=":::">
		<a>
			<parent><c path="js.Error"/></parent>
			<message><c path="String"/></message>
		</a>
		<c path="express.Request"/>
		<c path="express.Response"/>
		<x path="express.Next"/>
		<x path="Void"/>
	</f>
</x></t>
		<meta><m n=":optional"/></meta>
	</handleStoreError>
	<freeRetries>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</freeRetries>
	<failCallback>
		<t path="Null"><f a=":::">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="express.Next"/>
	<c path="Date"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</failCallback>
	<attachResetToRequest>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</attachResetToRequest>
</a></typedef>
	<class path="mw.expressbrute.Store" params="" file="src/mw/expressbrute/Store.hx" interface="1"/>
	<typedef path="mw.jwt.Options" params="" file="src/mw/jwt/Options.hx"><a>
	<userProperty>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</userProperty>
	<secret>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</secret>
	<getToken>
		<t path="Null"><f a="">
	<c path="express.Request"/>
	<c path="String"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</getToken>
	<credentialsRequired>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</credentialsRequired>
</a></typedef>
	<typedef path="mw.morgan.Options" params="" file="src/mw/morgan/Options.hx"><a>
	<stream>
		<t path="Null"><c path="js.node.fs.WriteStream"/></t>
		<meta><m n=":optional"/></meta>
	</stream>
	<skip>
		<t path="Null"><f a=":">
	<c path="express.Request"/>
	<c path="express.Response"/>
	<x path="Bool"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</skip>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</immediate>
</a></typedef>
	<class path="mw.passport.Strategy" params="T" file="src/mw/passport/Strategy.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<authenticate public="1" set="method"><f a="request:options">
	<c path="express.Request"/>
	<c path="mw.passport.Strategy.T"/>
	<x path="Void"/>
</f></authenticate>
	</class>
</haxe>